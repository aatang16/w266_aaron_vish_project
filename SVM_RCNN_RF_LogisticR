{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "UC22FJaAHNt_"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package omw-1.4 to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package omw-1.4 is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package maxent_ne_chunker to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package maxent_ne_chunker is already up-to-date!\n",
      "[nltk_data] Downloading package words to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package words is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     /Users/vsivakumar/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import json\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "os.getcwd()\n",
    "import warnings\n",
    "warnings.simplefilter(action='ignore')\n",
    "\n",
    "import sklearn as sk\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.metrics import precision_score,recall_score\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn import metrics\n",
    "from sklearn import tree\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from keras.layers import Dropout, Dense, GRU, Embedding, Activation\n",
    "from keras.models import Sequential\n",
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "from keras.preprocessing import sequence\n",
    "from keras.layers import Embedding\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Conv1D, MaxPooling1D\n",
    "from keras.datasets import imdb\n",
    "\n",
    "from transformers import logging\n",
    "logging.set_verbosity_error()\n",
    "\n",
    "import nltk\n",
    "from nltk.data import find\n",
    "from nltk.probability import FreqDist\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.tokenize import sent_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "nltk.download('omw-1.4')\n",
    "nltk.download(\"stopwords\")\n",
    "nltk.download('punkt')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "nltk.download('maxent_ne_chunker')\n",
    "nltk.download('words')\n",
    "nltk.download('stopwords')\n",
    "nltk.download('wordnet')\n",
    "from nltk import ne_chunk\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "import string\n",
    "from collections import Counter\n",
    "stopwords = set(stopwords.words('english'))\n",
    "\n",
    "import gensim\n",
    "import gensim.corpora as corpora\n",
    "import gensim.utils as genutils\n",
    "import gensim.models as genmodels\n",
    "from gensim.models import CoherenceModel\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models import KeyedVectors\n",
    "from gensim.test.utils import datapath\n",
    "\n",
    "import pyLDAvis\n",
    "import pyLDAvis.gensim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OJ5fZmoFJpzL",
    "outputId": "653f15d7-a00b-4072-fca7-684bd7b6d953"
   },
   "outputs": [],
   "source": [
    "file_paths = ['/Users/vsivakumar/Desktop/AM.csv', '/Users/vsivakumar/Desktop/CF.csv', '/Users/vsivakumar/Desktop/DB.csv', '/Users/vsivakumar/Desktop/IB.csv']\n",
    "df = [pd.read_csv(file_path) for file_path in file_paths]\n",
    "merged = pd.concat(df, ignore_index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Tek8N7doUjne",
    "outputId": "86024380-9252-4908-8ef2-134f7e4c8909"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label\n",
      "2    7020\n",
      "3    6610\n",
      "0    6325\n",
      "1    5582\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "merged['Label'] = merged['Label'].astype(int)\n",
    "label_counts = merged['Label'].value_counts()\n",
    "print(label_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove Stop words\n",
    "from nltk.corpus import stopwords\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "stopwords_list=stopwords.words('english')\n",
    "stopwords_list.extend(['this','that','where','what','when','why','which','the','they','him','her','includes_bibliographical_references_index'])\n",
    "\n",
    "#add additional stopwords to be removed\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_text(text):\n",
    "    \n",
    "    ## Remove puncuation\n",
    "    text = str(text).translate(string.punctuation)\n",
    "    \n",
    "    \n",
    "    ## Clean the text\n",
    "    text = re.sub(r\"[^A-Za-z0-9^,!.\\/'+-=]\", \" \", text)\n",
    "    text = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', text)\n",
    "    text = re.sub(r\"what's\", \"what is \", text)\n",
    "    text = re.sub(r\"\\'s\", \" \", text)\n",
    "    text = re.sub(r\"\\'ve\", \" have \", text)\n",
    "    text = re.sub(r\"n't\", \" not \", text)\n",
    "    text = re.sub(r\"i'm\", \"i am \", text)\n",
    "    text = re.sub(r\"\\'re\", \" are \", text)\n",
    "    text = re.sub(r\"\\'d\", \" would \", text)\n",
    "    text = re.sub(r\"\\'ll\", \" will \", text)\n",
    "    text = re.sub(r\",\", \" \", text)\n",
    "    text = re.sub(r\"\\.\", \" \", text)\n",
    "    text = re.sub(r\"!\", \" ! \", text)\n",
    "    text = re.sub(r\"\\/\", \" \", text)\n",
    "    text = re.sub(r\"\\^\", \" ^ \", text)\n",
    "    text = re.sub(r\"\\_\", \" _ \", text)\n",
    "    text = re.sub(r\"\\+\", \" + \", text)\n",
    "    text = re.sub(r\"\\-\", \" - \", text)\n",
    "    text = re.sub(r\"\\=\", \" = \", text)\n",
    "    text = re.sub(r\"'\", \" \", text)\n",
    "    text = re.sub(r\"(\\d+)(k)\", r\"\\g<1>000\", text)\n",
    "    text = re.sub(r\":\", \" : \", text)\n",
    "    text = re.sub(r\" e g \", \" eg \", text)\n",
    "    text = re.sub(r\" b g \", \" bg \", text)\n",
    "    text = re.sub(r\" u s \", \" american \", text)\n",
    "    text = re.sub(r\"\\0s\", \"0\", text)\n",
    "    text = re.sub(r\" 9 11 \", \"911\", text)\n",
    "    text = re.sub(r\"e - mail\", \"email\", text)\n",
    "    text = re.sub(r\"j k\", \"jk\", text)\n",
    "    text = re.sub(r\"\\s{2,}\", \" \", text)\n",
    "    text = re.sub(r\"'\\S*@\\S*\\s?'\", '', text)\n",
    "    text = re.sub(r\"'\\s+\", ' ', text) \n",
    "    text = re.sub(\"\\'\", \"\", text) \n",
    "    text=re.sub(\"-\",\"\",text)\n",
    "    text=re.sub(\"<\",\"\",text)\n",
    "    text=re.sub(\">\",\"\",text)\n",
    "    text=re.sub(\"</\",\"\",text)\n",
    "    text=re.sub(\"/>\",\"\",text)\n",
    "    text=re.sub(\"_\",\"\",text)\n",
    "    text=re.sub(r\"\\b\\d+\\b\",\"\",text)\n",
    "    text=re.sub(r\"\\b\\_+\\b\",\"\",text)\n",
    "    text = text.lower().split()\n",
    "    text = [lemmatizer.lemmatize(word) for word in text]\n",
    "    text = [w for w in text if not w in stopwords_list and len(w) > 3]\n",
    "    word_dic = Counter(text)\n",
    "    text = \" \".join(word_dic.keys())\n",
    "    stemmer = PorterStemmer()\n",
    "    words = word_tokenize(text)\n",
    "    text = ' '.join([PorterStemmer().stem(word) for word in words])\n",
    "    \n",
    "    return text\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged['newRisk Sentence']=merged['Risk Sentence'].map(lambda x:clean_text(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>newRisk Sentence</th>\n",
       "      <th>Risk Sentence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>risk factor normal cours busi activ expos varieti</td>\n",
       "      <td>risk factor risk factor normal course business...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>follow discuss materi risk factor applic</td>\n",
       "      <td>following discussion material risk factor appl...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    newRisk Sentence  \\\n",
       "0  risk factor normal cours busi activ expos varieti   \n",
       "1           follow discuss materi risk factor applic   \n",
       "\n",
       "                                       Risk Sentence  \n",
       "0  risk factor risk factor normal course business...  \n",
       "1  following discussion material risk factor appl...  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged[['newRisk Sentence','Risk Sentence']].head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Top 25 words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def most_common_word_func(text, n_words=25):\n",
    "\n",
    "    words = word_tokenize(text)\n",
    "    fdist = FreqDist(words) \n",
    "    \n",
    "    n_words = n_words\n",
    "    \n",
    "    df_fdist = pd.DataFrame({'Word': fdist.keys(),\n",
    "                             'Frequency': fdist.values()})\n",
    "    df_fdist = df_fdist.sort_values(by='Frequency', ascending=False).head(n_words)\n",
    "    \n",
    "    return df_fdist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "am = merged[merged['Label']==0]['newRisk Sentence']\n",
    "ib = merged[merged['Label']==1]['newRisk Sentence']\n",
    "db = merged[merged['Label']==2]['newRisk Sentence']\n",
    "cf = merged[merged['Label']==3]['newRisk Sentence']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_corpus_am = am.str.cat(sep=' ')\n",
    "text_corpus_ib = ib.str.cat(sep=' ')\n",
    "text_corpus_db = db.str.cat(sep=' ')\n",
    "text_corpus_cf = cf.str.cat(sep=' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_most_common_words_text_corpus_am = most_common_word_func(text_corpus_am)\n",
    "df_most_common_words_text_corpus_ib = most_common_word_func(text_corpus_ib)\n",
    "df_most_common_words_text_corpus_db = most_common_word_func(text_corpus_db)\n",
    "df_most_common_words_text_corpus_cf = most_common_word_func(text_corpus_cf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "splited_data = [df_most_common_words_text_corpus_am,\n",
    "               df_most_common_words_text_corpus_ib,\n",
    "               df_most_common_words_text_corpus_db,\n",
    "               df_most_common_words_text_corpus_cf]\n",
    "\n",
    "\n",
    "color_list = ['green', 'red', 'cyan', 'yellow']\n",
    "title_list = ['AM', 'IB', 'DB', 'CF']\n",
    "\n",
    "\n",
    "for item in range(4):\n",
    "    plt.figure(figsize=(7,4))\n",
    "    plt.bar(splited_data[item]['Word'], \n",
    "            splited_data[item]['Frequency'],\n",
    "            color=color_list[item])\n",
    "    plt.xticks(rotation = 45)\n",
    "    plt.xlabel('Most common Words')\n",
    "    plt.ylabel(\"Frequency\")\n",
    "    plt.title(\"Frequency distribution of the 25 most common words\")\n",
    "    plt.suptitle(title_list[item], fontsize=15)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Word Count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16.570750988142294\n",
      "17.990863489788605\n",
      "15.671367521367522\n",
      "15.925264750378215\n"
     ]
    }
   ],
   "source": [
    "merged['word_count'] = merged['newRisk Sentence'].apply(lambda x: len(str(x).split()))\n",
    "print(merged[merged['Label']==0]['word_count'].mean()) \n",
    "print(merged[merged['Label']==1]['word_count'].mean()) \n",
    "print(merged[merged['Label']==2]['word_count'].mean()) \n",
    "print(merged[merged['Label']==3]['word_count'].mean()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'CF')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PLOTTING WORD-COUNT\n",
    "fig = plt.figure(figsize=(10, 7))\n",
    "rows = 2\n",
    "columns = 2\n",
    "  \n",
    "fig.add_subplot(rows, columns, 1)\n",
    "train_words=merged[merged['Label']==0]['word_count']\n",
    "plt.hist(train_words,color='red')\n",
    "plt.title('AM')\n",
    "\n",
    "\n",
    "fig.add_subplot(rows, columns, 2)\n",
    "train_words=merged[merged['Label']==1]['word_count']\n",
    "plt.hist(train_words,color='green')\n",
    "plt.title('IB')\n",
    "\n",
    "\n",
    "fig.add_subplot(rows, columns, 3)\n",
    "train_words=merged[merged['Label']==2]['word_count']\n",
    "plt.hist(train_words,color='blue')\n",
    "plt.title('DB')\n",
    "\n",
    "\n",
    "fig.add_subplot(rows, columns, 4)\n",
    "train_words=merged[merged['Label']==3]['word_count']\n",
    "plt.hist(train_words,color='orange')\n",
    "plt.title('CF')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords\n",
    "stop_words = set(stopwords.words(\"english\"))\n",
    "def MorePreprocessing(text):\n",
    "    text_new = [t for t in text.split() if t not in stop_words]\n",
    "    text_new = [t for t in text_new if not str.isnumeric(t)]\n",
    "    \n",
    "    return text_new\n",
    "    \n",
    "merged['Risk Sentence new'] = merged['newRisk Sentence'].apply(MorePreprocessing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train_LDA_ Model\n",
    "t_list=merged['Risk Sentence new'].tolist()\n",
    "corpdict = corpora.Dictionary(t_list)\n",
    "\n",
    "doc_term_matrix = [corpdict.doc2bow(doc) for doc in t_list]\n",
    "corpora.MmCorpus.serialize('corpus.mm', doc_term_matrix)\n",
    "\n",
    "Lda = gensim.models.ldamodel.LdaModel\n",
    "ldamodel = Lda(doc_term_matrix, num_topics=4, id2word = corpdict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el65240113335077128726418025\" style=\"background-color:white;\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el65240113335077128726418025_data = {\"mdsDat\": {\"x\": [0.019920633879340705, 0.0038309908865786077, -0.16774060245105543, 0.14398897768513613], \"y\": [-0.17208906587230569, 0.11422715893903337, 0.017133301090375162, 0.04072860584289722], \"topics\": [1, 2, 3, 4], \"cluster\": [1, 1, 1, 1], \"Freq\": [29.420079057441704, 24.5118694414722, 23.12788289827059, 22.9401686028155]}, \"tinfo\": {\"Term\": [\"requir\", \"reput\", \"regul\", \"subsidiari\", \"market\", \"damag\", \"capit\", \"action\", \"valu\", \"busi\", \"credit\", \"loan\", \"could\", \"harm\", \"rate\", \"litig\", \"parti\", \"oper\", \"liquid\", \"affect\", \"fund\", \"regulatori\", \"advers\", \"third\", \"bank\", \"employe\", \"condit\", \"integr\", \"failur\", \"subject\", \"confid\", \"qualifi\", \"lack\", \"therebi\", \"dilut\", \"favor\", \"stockhold\", \"intermediari\", \"sudden\", \"borrow\", \"mean\", \"brokerag\", \"note\", \"reliabl\", \"flow\", \"billion\", \"tradit\", \"interconnect\", \"illiquid\", \"heavili\", \"corrupt\", \"volatil\", \"estat\", \"syndic\", \"promot\", \"dealer\", \"real\", \"thu\", \"facilit\", \"disposit\", \"loan\", \"collater\", \"declin\", \"incom\", \"incid\", \"reduct\", \"fluctuat\", \"inflat\", \"default\", \"valu\", \"decreas\", \"volum\", \"earn\", \"downgrad\", \"lower\", \"portfolio\", \"rate\", \"reduc\", \"market\", \"spread\", \"clear\", \"condit\", \"credit\", \"revenu\", \"price\", \"interest\", \"exchang\", \"equiti\", \"asset\", \"trade\", \"affect\", \"posit\", \"advers\", \"econom\", \"financi\", \"counterparti\", \"could\", \"result\", \"impact\", \"loss\", \"increas\", \"liquid\", \"secur\", \"invest\", \"fund\", \"client\", \"busi\", \"neg\", \"oper\", \"chang\", \"includ\", \"risk\", \"fraud\", \"capac\", \"agent\", \"guidanc\", \"give\", \"worldwid\", \"indirectli\", \"directli\", \"unavail\", \"diversifi\", \"separ\", \"divert\", \"rulemak\", \"regularli\", \"autom\", \"hous\", \"modif\", \"back\", \"quarter\", \"committe\", \"attent\", \"disadvantag\", \"suitabl\", \"aggress\", \"necessarili\", \"successor\", \"previou\", \"reorgan\", \"london\", \"compel\", \"legisl\", \"pursu\", \"human\", \"compound\", \"comprehens\", \"macroeconom\", \"expand\", \"employ\", \"platform\", \"annual\", \"face\", \"integr\", \"transit\", \"multipl\", \"jurisdict\", \"reform\", \"present\", \"enhanc\", \"exist\", \"initi\", \"regul\", \"effort\", \"extens\", \"technolog\", \"oper\", \"continu\", \"complianc\", \"busi\", \"offer\", \"product\", \"servic\", \"risk\", \"address\", \"conduct\", \"uncertainti\", \"regulatori\", \"competit\", \"cost\", \"chang\", \"subject\", \"financi\", \"increas\", \"relat\", \"manag\", \"affect\", \"result\", \"develop\", \"could\", \"addit\", \"includ\", \"system\", \"also\", \"advers\", \"requir\", \"impact\", \"item\", \"dividend\", \"fdic\", \"parent\", \"furthermor\", \"underwrit\", \"buffer\", \"orderli\", \"regim\", \"point\", \"util\", \"fulli\", \"qualit\", \"enabl\", \"routin\", \"modifi\", \"insuffici\", \"choos\", \"call\", \"submit\", \"prove\", \"document\", \"behavior\", \"analysi\", \"tlac\", \"option\", \"conserv\", \"elig\", \"restat\", \"assumpt\", \"discov\", \"vulner\", \"unsecur\", \"repurchas\", \"transfer\", \"arrang\", \"cover\", \"satisfi\", \"quantit\", \"subsidiari\", \"margin\", \"test\", \"extend\", \"minimum\", \"reserv\", \"enter\", \"world\", \"requir\", \"resolut\", \"feder\", \"applic\", \"capit\", \"agreement\", \"bank\", \"make\", \"limit\", \"time\", \"plan\", \"stock\", \"hold\", \"manag\", \"liquid\", \"compani\", \"fund\", \"certain\", \"restrict\", \"addit\", \"includ\", \"subject\", \"risk\", \"secur\", \"regul\", \"regulatori\", \"inform\", \"transact\", \"abil\", \"financi\", \"provid\", \"market\", \"terrorist\", \"ultim\", \"widespread\", \"toward\", \"spend\", \"weather\", \"damag\", \"civil\", \"misconduct\", \"crimin\", \"crime\", \"destruct\", \"transmiss\", \"environment\", \"usag\", \"expenditur\", \"goldman\", \"sach\", \"commenc\", \"injunct\", \"serious\", \"owe\", \"attempt\", \"lawsuit\", \"tool\", \"actor\", \"hurrican\", \"file\", \"mishandl\", \"catastroph\", \"fine\", \"confidenti\", \"subsequ\", \"proceed\", \"brought\", \"harm\", \"disast\", \"penalti\", \"litig\", \"social\", \"reput\", \"public\", \"unauthor\", \"third\", \"unforeseen\", \"action\", \"claim\", \"parti\", \"attack\", \"sanction\", \"polit\", \"breach\", \"failur\", \"cyber\", \"employe\", \"group\", \"investig\", \"liabil\", \"custom\", \"could\", \"system\", \"inform\", \"client\", \"government\", \"includ\", \"event\", \"result\", \"busi\", \"disrupt\", \"regulatori\", \"oper\", \"advers\", \"loss\", \"signific\", \"activ\", \"impact\", \"financi\", \"risk\", \"also\", \"subject\"], \"Freq\": [2913.0, 1688.0, 3207.0, 1359.0, 4061.0, 935.0, 2155.0, 1407.0, 1342.0, 6180.0, 2396.0, 965.0, 6736.0, 809.0, 1898.0, 841.0, 1123.0, 4892.0, 2203.0, 3926.0, 1863.0, 2942.0, 3544.0, 849.0, 1777.0, 1410.0, 2260.0, 915.0, 1305.0, 2498.0, 324.3426100656895, 305.6396481332897, 206.60817930184677, 156.43409118445322, 153.01650115407762, 135.4691052660101, 200.89429612002886, 197.44872656107884, 114.08342612201884, 467.29966470261735, 114.60377482897091, 218.2284920303326, 225.35239088902756, 91.23026100403241, 179.9266907189723, 91.45106035992747, 72.9751802238665, 75.88375584705976, 130.2766430518844, 67.26767303544285, 97.56233488624315, 590.7754832157192, 176.22279987460382, 52.39943934684858, 57.776161293326005, 71.97735165042472, 180.72718733432797, 48.95453185493273, 161.91650997402132, 73.93871084638604, 940.127819424724, 578.0745043743317, 638.9925587511583, 280.9383300858039, 117.5368397360476, 271.15369895888034, 316.6534211019079, 121.33364305300458, 459.3189647451392, 1233.580569375896, 309.21555854140115, 380.74182665013325, 617.3797546325434, 258.1979106659078, 316.32529492266957, 386.5539116444322, 1510.5525710020918, 847.0367038790693, 2917.5864130993355, 324.933634428539, 371.85144658770815, 1687.024408830874, 1761.6437389811467, 714.2528849325984, 896.7100390344459, 1040.2001152049256, 432.6945434620577, 449.70137600948857, 1316.7531147550626, 990.2780731288874, 2214.70726410328, 655.9949007569662, 1920.6963052857345, 790.6534056889687, 2528.272574273642, 777.6820156424085, 2716.5202242273704, 2251.3130079934795, 1344.341160213614, 1253.9781062750105, 1459.7975910260238, 1092.833062716173, 1256.2024212256297, 990.3470432425338, 951.5130119995105, 1225.5375487606364, 1291.5508134613742, 824.8896980204503, 1085.6577529129986, 885.6587009580195, 989.9812368133943, 966.58321211543, 233.19081213807297, 254.76758983215746, 169.74824379650022, 165.6808167565661, 177.09939957521615, 126.2399292422314, 117.71767489126991, 299.96724605163007, 128.8771674400865, 108.76419101177554, 87.88358501144198, 94.5524553563564, 76.52954692006112, 87.4806256537474, 71.43671911305023, 372.9551791177606, 65.51644169277523, 68.69563375529705, 82.95689467288466, 72.00618767845438, 99.14723650146811, 53.953402198407815, 52.247053059692206, 50.70724910345287, 55.35943398464219, 50.45863948232042, 50.04963036802438, 54.7682006853795, 69.60382873243803, 48.174964289572124, 307.58811664794734, 173.75827909194564, 201.43554980013056, 63.62642338263018, 72.17526908198359, 104.4129830204571, 341.8190904812244, 176.0088485056306, 244.51324639690054, 136.54463735087998, 629.6499851688395, 788.5345089568102, 376.0641184566955, 149.87867263973789, 437.8738281121433, 191.40360237266464, 176.17712647270332, 300.65860911823097, 554.8042911667125, 283.25322553986774, 2064.9425913839527, 269.4526095183915, 269.38370584855613, 911.5041760145976, 2402.9962270169926, 1098.2508208536897, 631.1914799391142, 2829.99963182241, 474.74997857512915, 936.327052841487, 1416.4507981684415, 1977.720954071533, 347.58968289302044, 524.8304513098115, 433.72641717422766, 1227.459327886749, 582.0111918001858, 880.0968616202583, 1018.2689374590792, 1013.5781156784451, 1641.4551204448308, 1174.1974866161588, 716.4233768880732, 891.07367430373, 1066.733279774156, 1205.9635893504694, 529.3259540903971, 1211.0808320324863, 873.05338602961, 962.0174491759592, 621.6117832955277, 666.139862570089, 688.8549538323588, 564.4176601919379, 555.6066723633753, 326.39915482990307, 479.48627718425837, 242.93501025150766, 214.98551817450834, 170.09868585512837, 160.46704136852355, 130.59912698154548, 141.58324143288718, 119.12447146806937, 110.06330513514501, 98.65229380283617, 196.0774372765991, 87.38591033644204, 75.6985361690931, 78.04374221482806, 184.36665902236228, 67.63176349450738, 70.26308549246752, 69.70506462651423, 64.49796361465617, 98.56792141902032, 76.01739068811071, 110.05527182516657, 177.80289035844052, 59.51830144861737, 83.08435004875261, 65.03949356611146, 54.12842566296809, 55.678724371815, 259.3192740736542, 151.82734094644005, 177.23723219074716, 205.23147319868272, 281.280148537625, 268.1887724192056, 176.77047425195744, 162.2860769251916, 140.09544979583734, 103.00775081176829, 1216.5077094976064, 310.50788732096885, 173.9363224915627, 215.38557701143483, 190.3901253603677, 404.1083945430372, 254.51241293106014, 147.96502733949447, 2093.7338446224985, 450.13106900624246, 526.638457659475, 623.7808173074756, 1380.0785729223362, 389.35448532375517, 1074.4373326734349, 642.2068317195517, 919.5562929992456, 826.5550933306112, 489.2622044438844, 431.10954871982074, 352.8405343899634, 1123.919444590906, 964.6997839151762, 576.9060688895427, 840.4637173078235, 946.1669604239502, 470.0495140090179, 1037.3971207344073, 1187.5480569771205, 825.2440571421292, 1099.8367127276433, 843.008398360488, 856.8572816663112, 780.6523527910277, 617.807791104518, 586.2223550441487, 584.5165325855712, 673.9226110629514, 486.25584567240253, 545.1306846490071, 176.24318503004088, 161.33944369871182, 128.3428321373246, 117.0182754604896, 100.07670715863561, 188.5887931142661, 926.8092861153734, 184.7616094929492, 304.3776230676762, 164.25757834222, 109.15476219804805, 106.33061756934397, 99.9212504798217, 97.92752867445262, 63.6723880091662, 62.09655422663247, 217.71698889739426, 217.71698889739426, 57.211503168842924, 51.75623292810535, 48.26415878046614, 50.59392715398889, 139.58655179008386, 99.55126089079936, 61.72136853291111, 80.25887045210648, 42.62365806876236, 52.11639705349055, 44.8947682560311, 93.99772479100208, 429.2866380325076, 428.3259310202937, 92.17535099112904, 435.08041822148834, 125.36388174573001, 767.1969804833254, 219.96563406828878, 508.989901241878, 775.3713173218881, 191.6671765245072, 1480.0990437103258, 331.7278532286722, 237.08597979531643, 726.9422299136535, 157.40261441236368, 1133.0844524655222, 650.2611468913434, 911.688464323584, 573.6333043024937, 309.64898711467106, 314.74462630771933, 433.03030240723683, 915.3949142637948, 443.08780634838234, 916.1538373397487, 574.3280784919257, 359.18481115573235, 596.4606563922972, 628.5488811144875, 2423.856833748944, 893.4117327905365, 891.9907608843349, 1422.5903076409352, 356.03581459048854, 1559.737843797901, 623.0198665887018, 1548.8200534597615, 1591.5178037169103, 547.038226394171, 895.6137140233348, 1067.2959760687281, 891.0076533862047, 777.6566157928842, 741.7957721600609, 682.6133741339219, 711.5060056889022, 741.5196940270243, 687.9311327744929, 638.4302786302829, 612.8863626021529], \"Total\": [2913.0, 1688.0, 3207.0, 1359.0, 4061.0, 935.0, 2155.0, 1407.0, 1342.0, 6180.0, 2396.0, 965.0, 6736.0, 809.0, 1898.0, 841.0, 1123.0, 4892.0, 2203.0, 3926.0, 1863.0, 2942.0, 3544.0, 849.0, 1777.0, 1410.0, 2260.0, 915.0, 1305.0, 2498.0, 325.23274103311866, 306.62795196809685, 207.43406079832513, 157.28437811321115, 153.91412242084678, 136.2776299740785, 202.17206076068086, 198.78429237999845, 114.8930266279393, 470.96275664246326, 115.58736485360781, 220.40436248007117, 227.74093297808335, 92.22532780780223, 181.91665446255345, 92.4716072896638, 73.8138019995697, 76.78832748034279, 131.974003955761, 68.15928924373547, 98.95036327634809, 599.5512472936506, 178.8630718495469, 53.20491923073881, 58.66852151532548, 73.09738729445613, 183.68220168341136, 49.76830671163498, 164.63556022140986, 75.18472771571929, 965.648503105294, 595.3031826436682, 660.2116683387399, 288.51771781685716, 119.84694924837909, 279.18314697906544, 327.07705093069376, 123.81958790336162, 484.5420076980576, 1342.0918046352485, 324.71337686903433, 406.4326086011748, 677.9982686368475, 273.5416144873456, 339.9305582518121, 423.4423985897228, 1898.7498402429776, 1012.145849530768, 4061.509757693888, 354.5072005182779, 413.2294215397534, 2260.667877498311, 2396.1823288891273, 883.6257601950698, 1155.5941479697497, 1407.386354603133, 499.19556476346395, 523.4886862982959, 1956.3056903610443, 1406.0143991179284, 3926.3427115907803, 851.5205994734172, 3544.5485259297757, 1153.5848783362203, 5585.169999808449, 1142.1974344600294, 6736.06751776557, 5299.69858436382, 2699.515310370697, 2521.0598183196234, 3307.968614489563, 2203.896496296181, 2813.3856386851808, 1982.0221464314775, 1863.5455574775744, 3522.2844927038304, 6180.122718759327, 1621.0491986345307, 4892.054458105649, 2457.705893606062, 4699.2845867643755, 4732.072011689099, 234.00250926234762, 255.67908875556225, 170.55584147810794, 166.48000820453515, 178.01892612356806, 127.08276716805686, 118.53600947388547, 302.3500172695475, 129.92069939469985, 109.684479312433, 88.6463703052521, 95.43128329991424, 77.28936698310105, 88.42360656127296, 72.21154291168703, 377.2993250651678, 66.29015590166713, 69.53814196510768, 83.99417755348452, 72.95389837825161, 100.47838148964512, 54.70828293051537, 53.034003010245364, 51.50120528858499, 56.22935813200464, 51.26272025983359, 50.85009996220181, 55.6593210564595, 70.73962373352018, 48.966021933562445, 313.8740871094192, 176.72935550718248, 206.44636850794075, 64.67434530917565, 73.49006812235356, 106.93473270654113, 362.6983337018461, 183.4075715023614, 257.8649030209659, 142.77683986501506, 717.359031197767, 915.0300245697224, 422.0919929328227, 159.73564561057088, 515.0256481301665, 210.10867001809564, 192.06470557758502, 346.56644508766976, 685.6621623892346, 329.9328540100286, 3207.730939933974, 325.62977195071306, 326.78951884010587, 1472.459677376253, 4892.054458105649, 1885.4082233169174, 945.8670840027957, 6180.122718759327, 667.5075157717612, 1649.0570279076146, 2879.3987246157362, 4732.072011689099, 458.6090613222243, 824.4614506953731, 646.2370317010761, 2942.078714902663, 1002.601985881726, 1913.5714190099927, 2457.705893606062, 2498.494473903623, 5585.169999808449, 3307.968614489563, 1482.8277888694981, 2621.9579512333216, 3926.3427115907803, 5299.69858436382, 988.2371889437972, 6736.06751776557, 3158.5108440780095, 4699.2845867643755, 1747.989305980636, 2534.9674927542105, 3544.5485259297757, 2913.715890876476, 2699.515310370697, 327.2386092970414, 480.8982946176712, 243.81804365220475, 216.09384455275244, 171.1795398375016, 161.5268742996561, 131.48293143370424, 142.64283035637362, 120.02632113301061, 110.93010100449693, 99.55482074598532, 197.9568581919798, 88.33831822175085, 76.5352470403659, 78.94442805265203, 186.50307374895007, 68.4665932492068, 71.1497532974863, 70.59931050921628, 65.3399641839011, 99.87359970359643, 77.02609012744196, 111.52191918224891, 180.4362593561651, 60.42295991528218, 84.40279345387138, 66.11143491087073, 55.06185037551003, 56.64893222511864, 263.9057604611764, 154.60163768675443, 180.90014248117132, 210.98505874466534, 290.87552915686405, 277.12769936865084, 181.4784706332565, 166.78714794713062, 143.85853550143696, 105.18879197460694, 1359.8810601527446, 329.1744950470099, 181.32250333833755, 226.55175459996093, 199.73190624284672, 444.6254720864305, 272.1821273235291, 153.25241184422782, 2913.715890876476, 532.1226944396573, 641.1915873854448, 785.7580180092192, 2155.0476021890654, 488.3766385752091, 1777.3577299625535, 940.5066419265518, 1531.7736497819415, 1351.704031946658, 684.8544548560662, 605.9132246770935, 463.24523105840507, 2621.9579512333216, 2203.896496296181, 1035.8985612616648, 1863.5455574775744, 2333.4539694088776, 793.5837869033327, 3158.5108440780095, 4699.2845867643755, 2498.494473903623, 4732.072011689099, 2813.3856386851808, 3207.730939933974, 2942.078714902663, 1744.6515869125246, 1603.3132052809776, 2204.023631218449, 5585.169999808449, 1476.749712214239, 4061.509757693888, 177.0271481663367, 162.2003460194316, 129.17147036386376, 117.98687649622804, 100.99327936362563, 190.37246818854211, 935.7954436169878, 186.6006624492158, 307.48975742100356, 166.04064158291078, 110.42930051560697, 107.57251069513056, 101.18675151441808, 99.23039762619855, 64.54513710531876, 63.02936618888885, 221.04021101336537, 221.04021101336537, 58.11193331783834, 52.58864394610091, 49.041556657401856, 51.437248189996446, 141.93098588676048, 101.24504408134274, 62.81909435307311, 81.70305123889351, 43.40515691010572, 53.08581907122556, 45.736727720083074, 95.79153948002131, 439.3090523982012, 440.86069102490626, 94.0411255090425, 451.0276560148215, 128.39008937458874, 809.9969022847846, 226.95864903494714, 534.6834813586154, 841.9741758213711, 199.84793649419265, 1688.0102744055766, 357.02376653220995, 251.8865289110349, 849.8088547920609, 164.9326795715413, 1407.766216301084, 771.9090821368616, 1123.0431019215416, 679.3587278140715, 345.1743454080732, 359.7021874090456, 537.7027519113169, 1305.8522987556944, 580.2461148702092, 1410.4762733964958, 854.6070892599541, 463.3642480539903, 932.0266860587104, 1003.6690031747298, 6736.06751776557, 1747.989305980636, 1744.6515869125246, 3522.2844927038304, 462.6134953480656, 4699.2845867643755, 1134.401300328755, 5299.69858436382, 6180.122718759327, 1019.8987478433371, 2942.078714902663, 4892.054458105649, 3544.5485259297757, 2521.0598183196234, 2235.688371822763, 2146.5893969707035, 2699.515310370697, 5585.169999808449, 4732.072011689099, 2534.9674927542105, 2498.494473903623], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -5.9433, -6.0027, -6.3942, -6.6724, -6.6945, -6.8163, -6.4223, -6.4396, -6.9881, -5.5781, -6.9836, -6.3395, -6.3074, -7.2117, -6.5325, -7.2093, -7.435, -7.3959, -6.8554, -7.5164, -7.1446, -5.3436, -6.5533, -7.7662, -7.6685, -7.4487, -6.5281, -7.8342, -6.638, -7.4218, -4.8791, -5.3654, -5.2652, -6.0869, -6.9583, -6.1224, -5.9673, -6.9265, -5.5953, -4.6074, -5.991, -5.783, -5.2996, -6.1713, -5.9683, -5.7678, -4.4048, -4.9833, -3.7466, -5.9415, -5.8066, -4.2944, -4.2511, -5.1538, -4.9263, -4.7779, -5.655, -5.6165, -4.5421, -4.8271, -4.0222, -5.2389, -4.1646, -5.0522, -3.8898, -5.0688, -3.818, -4.0058, -4.5214, -4.591, -4.439, -4.7285, -4.5892, -4.827, -4.867, -4.6139, -4.5615, -5.0098, -4.7351, -4.9387, -4.8274, -4.8513, -6.0907, -6.0022, -6.4082, -6.4325, -6.3658, -6.7044, -6.7743, -5.8389, -6.6837, -6.8534, -7.0665, -6.9934, -7.2049, -7.0711, -7.2737, -5.6211, -7.3603, -7.3129, -7.1242, -7.2658, -6.9459, -7.5544, -7.5866, -7.6165, -7.5287, -7.6214, -7.6295, -7.5394, -7.2997, -7.6677, -5.8138, -6.3849, -6.2371, -7.3895, -7.2635, -6.8942, -5.7083, -6.372, -6.0433, -6.6259, -5.0974, -4.8724, -5.6128, -6.5327, -5.4606, -6.2882, -6.3711, -5.8366, -5.2239, -5.8962, -3.9097, -5.9462, -5.9464, -4.7275, -3.7581, -4.5411, -5.0949, -3.5945, -5.3798, -4.7006, -4.2866, -3.9529, -5.6915, -5.2795, -5.4701, -4.4299, -5.1761, -4.7625, -4.6167, -4.6213, -4.1392, -4.4742, -4.9683, -4.7501, -4.5702, -4.4475, -5.2709, -4.4433, -4.7706, -4.6735, -5.1102, -5.0411, -5.0075, -5.2068, -5.2225, -5.6963, -5.3117, -5.9916, -6.1139, -6.3481, -6.4063, -6.6123, -6.5315, -6.7043, -6.7834, -6.8928, -6.2059, -7.0141, -7.1577, -7.1272, -6.2675, -7.2704, -7.2322, -7.2402, -7.3178, -6.8937, -7.1535, -6.7835, -6.3038, -7.3981, -7.0646, -7.3094, -7.4931, -7.4648, -5.9264, -6.4617, -6.3069, -6.1603, -5.8451, -5.8927, -6.3096, -6.3951, -6.5421, -6.8496, -4.3807, -5.7462, -6.3257, -6.112, -6.2354, -5.4828, -5.9451, -6.4875, -3.8377, -5.3749, -5.2179, -5.0486, -4.2545, -5.5199, -4.5049, -5.0195, -4.6605, -4.7672, -5.2915, -5.4181, -5.6184, -4.4599, -4.6126, -5.1268, -4.7505, -4.632, -5.3316, -4.54, -4.4048, -4.7688, -4.4815, -4.7475, -4.7312, -4.8243, -5.0583, -5.1107, -5.1136, -4.9713, -5.2977, -5.1834, -6.3044, -6.3928, -6.6216, -6.714, -6.8703, -6.2367, -4.6445, -6.2572, -5.758, -6.3748, -6.7835, -6.8097, -6.8719, -6.8921, -7.3225, -7.3476, -6.0931, -6.0931, -7.4295, -7.5297, -7.5996, -7.5525, -6.5376, -6.8756, -7.3537, -7.091, -7.7239, -7.5228, -7.672, -6.933, -5.4142, -5.4164, -6.9526, -5.4008, -6.6451, -4.8335, -6.0828, -5.2439, -4.8229, -6.2205, -4.1764, -5.672, -6.0079, -4.8874, -6.4175, -4.4436, -4.9989, -4.661, -5.1243, -5.7408, -5.7245, -5.4055, -4.6569, -5.3825, -4.6561, -5.1231, -5.5924, -5.0853, -5.0329, -3.6832, -4.6812, -4.6828, -4.216, -5.6013, -4.124, -5.0417, -4.131, -4.1038, -5.1718, -4.6788, -4.5034, -4.6839, -4.82, -4.8672, -4.9504, -4.9089, -4.8676, -4.9426, -5.0173, -5.0581], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.2208, 1.2203, 1.2195, 1.2181, 1.2176, 1.2175, 1.2172, 1.2168, 1.2164, 1.2157, 1.2149, 1.2136, 1.2129, 1.2126, 1.2125, 1.2124, 1.2121, 1.2116, 1.2105, 1.2103, 1.2094, 1.2087, 1.2086, 1.2082, 1.2082, 1.2081, 1.2073, 1.207, 1.2068, 1.2068, 1.1967, 1.1941, 1.1908, 1.1969, 1.204, 1.1943, 1.1911, 1.2032, 1.17, 1.1392, 1.1746, 1.1582, 1.1298, 1.1658, 1.1515, 1.1323, 0.9948, 1.0454, 0.8927, 1.1364, 1.118, 0.9308, 0.9159, 1.0107, 0.9699, 0.9212, 1.0805, 1.0716, 0.8276, 0.873, 0.6509, 0.9626, 0.6108, 0.8457, 0.4309, 0.8391, 0.3154, 0.3674, 0.5263, 0.5251, 0.4055, 0.522, 0.4172, 0.5297, 0.5513, 0.1678, -0.342, 0.5479, -0.2819, 0.2028, -0.334, -0.3649, 1.4025, 1.4024, 1.4013, 1.4012, 1.4008, 1.3994, 1.3991, 1.3981, 1.3979, 1.3976, 1.3974, 1.3968, 1.3961, 1.3953, 1.3952, 1.3944, 1.3943, 1.3938, 1.3936, 1.3929, 1.3927, 1.3921, 1.3911, 1.3905, 1.3904, 1.3902, 1.3901, 1.3899, 1.3898, 1.3897, 1.3858, 1.3891, 1.3814, 1.3897, 1.388, 1.3821, 1.3467, 1.3648, 1.3528, 1.3614, 1.2756, 1.2572, 1.2905, 1.3423, 1.2437, 1.3128, 1.3197, 1.2639, 1.1942, 1.2535, 0.9656, 1.2166, 1.2128, 0.9264, 0.6951, 0.8656, 1.0015, 0.625, 1.0653, 0.84, 0.6966, 0.5336, 1.1288, 0.9544, 1.0073, 0.5318, 0.8621, 0.6293, 0.5249, 0.5038, 0.1815, 0.3703, 0.6786, 0.3268, 0.1029, -0.0744, 0.7817, -0.31, 0.1202, -0.1801, 0.3721, 0.0696, -0.2321, -0.2354, -0.1748, 1.4616, 1.4612, 1.4605, 1.459, 1.4578, 1.4575, 1.4574, 1.4567, 1.4566, 1.4563, 1.455, 1.4546, 1.4533, 1.4531, 1.4527, 1.4526, 1.4519, 1.4516, 1.4514, 1.4512, 1.451, 1.4509, 1.4509, 1.4494, 1.449, 1.4484, 1.4478, 1.447, 1.4469, 1.4466, 1.446, 1.4437, 1.4365, 1.4306, 1.4313, 1.4378, 1.4368, 1.4376, 1.4432, 1.3527, 1.4058, 1.4225, 1.4136, 1.4162, 1.3686, 1.397, 1.429, 1.1337, 1.2968, 1.2673, 1.2333, 1.0185, 1.2375, 0.9608, 1.0826, 0.9538, 0.9723, 1.1278, 1.1238, 1.1919, 0.617, 0.638, 0.8788, 0.6678, 0.5614, 0.9404, 0.3507, 0.0886, 0.3564, 0.0049, 0.259, 0.1441, 0.1374, 0.426, 0.458, 0.1369, -0.6506, 0.3533, -0.5442, 1.4678, 1.467, 1.4658, 1.464, 1.4632, 1.4629, 1.4626, 1.4624, 1.4621, 1.4615, 1.4607, 1.4607, 1.4597, 1.4591, 1.4587, 1.4574, 1.4571, 1.4571, 1.4567, 1.4563, 1.4563, 1.4557, 1.4556, 1.4554, 1.4547, 1.4544, 1.4541, 1.4539, 1.4537, 1.4534, 1.4492, 1.4434, 1.4522, 1.4363, 1.4484, 1.418, 1.441, 1.423, 1.3899, 1.4305, 1.3408, 1.3988, 1.4117, 1.3161, 1.4256, 1.2552, 1.3008, 1.2638, 1.3031, 1.3637, 1.3388, 1.2558, 1.117, 1.2026, 1.0408, 1.0748, 1.2176, 1.0259, 1.0043, 0.4502, 0.8011, 0.8014, 0.5657, 1.2104, 0.3694, 0.873, 0.2421, 0.1156, 0.8493, 0.2829, -0.0502, 0.0915, 0.2961, 0.3691, 0.3266, 0.1388, -0.5469, -0.4561, 0.0934, 0.067]}, \"token.table\": {\"Topic\": [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 3, 4, 1, 2, 3, 4, 1, 3, 1, 4, 3, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 1, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 4, 2, 1, 2, 3, 4, 2, 1, 2, 3, 4, 1, 2, 3, 4, 2, 4, 1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 1, 2, 3, 4, 3, 1, 2, 3, 4, 1, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 1, 2, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 4, 1, 2, 3, 4, 1, 2, 4, 2, 1, 2, 3, 4, 2, 3, 1, 3, 1, 2, 3, 4, 2, 2, 1, 2, 3, 3, 1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 1, 2, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4, 1, 3, 4, 1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 4, 1, 2, 3, 4, 1, 3, 1, 2, 3, 4, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1, 3, 4, 2, 3, 4, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 1, 2, 3, 4, 1, 1, 2, 3, 4, 1, 2, 2, 3, 4, 4, 1, 4, 1, 2, 3, 4, 1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 1, 3, 1, 2, 3, 4, 1, 2, 3, 4, 4, 3, 1, 2, 3, 4, 1, 1, 2, 3, 4, 1, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 1, 2, 3, 4, 1, 2, 4, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 4, 4, 2, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 4, 1, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 3, 4, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4, 1, 3, 2, 3, 2, 1, 2, 3, 4, 1, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4, 1, 2, 3, 4, 2, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 4, 1, 3, 4, 1, 2, 3, 4, 1, 3, 1, 2, 3, 4, 3, 1, 2, 4, 1, 2, 3, 4, 2, 1, 2, 1, 1, 2, 3, 4, 1, 2, 3, 4, 4, 2, 3, 4, 1, 1, 2, 3, 4, 1, 1, 2, 3, 4, 3, 4, 4, 1, 2, 3, 4, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 4, 4, 1, 2, 3, 4, 2, 4, 1, 2, 3, 4, 3, 2, 3, 4, 1, 2, 3, 4, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4, 1, 4, 4, 2, 3, 4, 2], \"Freq\": [0.30716549061034093, 0.2159686462784672, 0.2654236514136624, 0.21188520548748777, 0.007103452181339508, 0.05540692701444816, 0.1328345557910488, 0.8048211321457662, 0.2981473778372225, 0.23292763893533008, 0.1509371100300939, 0.3181791547856609, 0.012239444975880719, 0.012239444975880719, 0.9791555980704574, 0.2377702775369834, 0.2763960749531112, 0.32831927803708627, 0.15735263373619274, 0.002180506414585184, 0.758816232275644, 0.19406507089808137, 0.04579063470628886, 0.5419590071759843, 0.194383006738289, 0.012413428587060547, 0.2513719288879761, 0.5641382229475786, 0.2717541687968697, 0.021139265239119197, 0.14313574776367458, 0.9967410000543471, 0.9902680862364966, 0.02866639985246556, 0.004095199978923651, 0.7965163959006503, 0.17199839911479337, 0.3080907357717054, 0.2627252625146681, 0.1771225868905195, 0.2516797559825199, 0.005542123315835811, 0.005542123315835811, 0.9864979502187743, 0.007003937059717991, 0.9595393771813647, 0.03501968529858995, 0.008908595063064148, 0.012726564375805926, 0.7941376170502897, 0.18580783988676652, 0.011020590999147938, 0.005510295499573969, 0.9753223034245925, 0.011020590999147938, 0.6732076722411119, 0.05878426902636892, 0.23309240587847155, 0.03527056141582135, 0.015156925688207729, 0.9814109383114504, 0.003789231422051932, 0.02060766930167644, 0.13394985046089686, 0.0014719763786911742, 0.844914441368734, 0.007045677825403462, 0.007045677825403462, 0.007045677825403462, 0.9863948955564846, 0.9852865714223564, 0.009952389610326833, 0.9832223095804957, 0.9922611972379459, 0.2486837582264952, 0.13053084142205176, 0.6042677745141535, 0.01631635517775647, 0.008966847121468578, 0.9863531833615435, 0.9840858471827569, 0.9915858386112861, 0.002123310146919242, 0.004246620293838484, 0.06137219845481222, 0.033475744611715756, 0.10042723383514726, 0.8052776342707179, 0.9890911302615956, 0.009074230552858675, 0.015577526347573714, 0.9735953967233572, 0.9963270408680557, 0.20905733733704432, 0.4579197094921327, 0.0755648425204332, 0.2576000627249029, 0.9915110996850593, 0.9973439800694398, 0.2914088762411034, 0.03990631107760333, 0.6403570847336348, 0.02830563925271864, 0.010439335304852932, 0.9812975186561756, 0.2875565615592499, 0.1744195537326598, 0.40540761137861464, 0.1324217250697589, 0.360498789666008, 0.4142074129571062, 0.09561762479854614, 0.12979583962015412, 0.983840375486911, 0.005359037780866155, 0.005359037780866155, 0.9914219894602387, 0.033682723265834213, 0.010363914851025911, 0.11400306336128503, 0.8420680816458553, 0.9002263164463786, 0.050819227541327824, 0.041139374676313, 0.009679852865014823, 0.34806955614731705, 0.1544452190408976, 0.09368919537407391, 0.4039991667191127, 0.9709338314523587, 0.001679816317391624, 0.02519724476087436, 0.003359632634783248, 0.9808656629653548, 0.9869246414591056, 0.2065839339899848, 0.1245295676855516, 0.5570043453842114, 0.11198007636840299, 0.9802715863895753, 0.33812021597171543, 0.5804895743231221, 0.030919547773224716, 0.05086764311078905, 0.0021144619934718952, 0.667112758940383, 0.20510281336677386, 0.12475325761484182, 0.9895732178508814, 0.015462081528920021, 0.013607280895904201, 0.9797242245051025, 0.746239647491634, 0.0942199436370587, 0.06767911444352104, 0.09200820787093056, 0.029109911663859785, 0.6367793176469329, 0.02668408569187147, 0.30807989844251604, 0.9962096650257204, 0.018146321871885928, 0.006804870701957223, 0.002268290233985741, 0.9708282201458971, 0.9831884618391792, 0.09016614964207928, 0.5823672488647238, 0.17290685166657555, 0.15434323262261807, 0.9903955554595195, 0.010106077096525709, 0.34072415250501564, 0.4598730892705733, 0.0559163869908538, 0.14318775734106487, 0.40335106393073383, 0.17977848304016145, 0.057155009059010865, 0.35985387521829176, 0.6811431863947386, 0.021887634524252526, 0.06566290357275757, 0.23113342057610667, 0.02398266322815202, 0.9712978607401568, 0.005995665807038005, 0.7353363634965395, 0.013771906921331331, 0.18988538330926533, 0.06093025486407195, 0.00905556763767303, 0.00905556763767303, 0.9870568725063602, 0.006022621874179279, 0.006022621874179279, 0.9877099873654017, 0.2769837457574673, 0.0009963444091995227, 0.09664540769235369, 0.6267006333864997, 0.06031923196560977, 0.07065967173114286, 0.10512780428291987, 0.7634691360218607, 0.004274438422717051, 0.004274438422717051, 0.0010686096056792627, 0.9906011044646765, 0.9849873253330443, 0.9678714125242381, 0.0015146657472992773, 0.012117325978394218, 0.018175988967591327, 0.9516084707672147, 0.024637112511772547, 0.009238917191914706, 0.015398195319857842, 0.9472862883046993, 0.0020638045496834405, 0.043339895543352255, 0.006191413649050322, 0.009296055223941767, 0.9853818537378273, 0.16797586840201448, 0.5352965926787089, 0.1102974075651782, 0.18619011919259437, 0.994060828165285, 0.9922274941778739, 0.006614849961185826, 0.9870534607818902, 0.026436533815797074, 0.004406088969299512, 0.004406088969299512, 0.9693395732458927, 0.012936473571206879, 0.9831719914117227, 0.9842424418932677, 0.013300573539098212, 0.3853323683660089, 0.06961475357248507, 0.008824405382427685, 0.5363277493542159, 0.993759560908492, 0.9954806926512888, 0.002079441768025047, 0.002079441768025047, 0.9960526068839974, 0.9866786678936414, 0.9431837290407431, 0.007311501775509636, 0.047524761540812636, 0.9100318224123377, 0.04867269066386895, 0.0250738103419931, 0.01474930020117241, 0.6856885998200971, 0.06848217368620439, 0.010402355496638642, 0.23491986163242265, 0.05834847313308875, 0.8260915406737303, 0.11055500172585238, 0.0030709722701625663, 0.9807153161713883, 0.03271402565800152, 0.959611419301378, 0.005452337609666921, 0.08649560598861974, 0.24814313193456483, 0.01559756829302979, 0.649426025291604, 0.9930065288731138, 0.008656348710392605, 0.8685203206093914, 0.07502168882340259, 0.049052642692224764, 0.007348021046300008, 0.025718073662050027, 0.936872683403251, 0.033066094708350036, 0.01007755711880754, 0.9876005976431389, 0.8596174316240708, 0.12989774522319292, 0.01146156575498761, 0.9839929404099957, 0.011181737959204498, 0.005590868979602249, 0.30676974708963034, 0.028208712376057963, 0.11636093855123911, 0.5491883690713785, 0.8673955270519487, 0.07211602534381098, 0.056090241934075205, 0.006009668778650915, 0.09042354004770652, 0.8094365278464051, 0.055420879384078185, 0.04375332582953541, 0.030328234176676648, 0.9429323716748558, 0.027571121978796954, 0.9836684667619217, 0.026484014703813, 0.0044140024506355005, 0.9490105268866326, 0.017656009802542002, 0.00918022098948609, 0.823159815390586, 0.1621839041475876, 0.00306007366316203, 0.005576008422618227, 0.8782213265623707, 0.061336092648800494, 0.05576008422618227, 0.9839915494692311, 0.01214804382060779, 0.13707522678526773, 0.11563329186913647, 0.04594700339170985, 0.7006918017235753, 0.9906248004582885, 0.9966448600770021, 0.01715555883203982, 0.1263272968541114, 0.8219072276804532, 0.03431111766407964, 0.9795459674500132, 0.4526272253282714, 0.29381379618816983, 0.12067672067692045, 0.1328518200923961, 0.004552603660411596, 0.013657810981234786, 0.002276301830205798, 0.9765334851582872, 0.9894641066909683, 0.005497022814949824, 0.9691905901009574, 0.018344301389923486, 0.01222953425994899, 0.995715818323881, 0.9901147239360507, 0.005051605734367606, 0.5108541597923646, 0.015025122346834252, 0.4507536704050276, 0.023610906545025255, 0.9931093409958847, 0.99427630451573, 0.004524063723136485, 0.004524063723136485, 0.00904812744627297, 0.9862458916437538, 0.008646526831195102, 0.18373869516289593, 0.036747739032579184, 0.7695408879763641, 0.24572695761493066, 0.06318693195812503, 0.019892182283113433, 0.6716536841474771, 0.9971167216429649, 0.014814871471917004, 0.03703717867979251, 0.0012345726226597503, 0.9469172015800285, 0.9829914710584805, 0.23313785606221074, 0.004317367704855754, 0.7620153999070407, 0.002158683852427877, 0.010601662219536472, 0.988605001971776, 0.9736184823821143, 0.019375492186708743, 0.004843873046677186, 0.9906656964529625, 0.9850424788474047, 0.007577249837287728, 0.4978671522390596, 0.20596289928937286, 0.03259844449184319, 0.26375105088854944, 0.9845891008493562, 0.008343975430926747, 0.008343975430926747, 0.21067036518459722, 0.20471201142180054, 0.25280443822151666, 0.3319654239272441, 0.973943652841351, 0.0034659916471222454, 0.010397974941366737, 0.013863966588488982, 0.441358480127323, 0.35490058607498437, 0.08796939569661026, 0.1157810259512087, 0.9954780874076619, 0.9772282564406348, 0.016152533164308015, 0.06648892012031062, 0.06820846115790485, 0.35422545374441344, 0.511276868511354, 0.01515459869858253, 0.8577502863397712, 0.018185518438299037, 0.11214403036951073, 0.9888066338674901, 0.9931850961605688, 0.010928603140320268, 0.8622667877712691, 0.060107317271761475, 0.06775733946998566, 0.989733758942144, 0.7389584221834155, 0.03410577333154225, 0.1222123544380264, 0.10444893082784815, 0.9910239770022292, 0.005030578563463093, 0.49948987794230293, 0.2371315582150327, 0.18920071134178143, 0.07416667884597831, 0.002158129385682518, 0.05611136402774547, 0.1661759626975539, 0.774768449460024, 0.9962149658938407, 0.048541271858526074, 0.8504430829613767, 0.07378273322495962, 0.0271831122407746, 0.9979074757701092, 0.009877026664105905, 0.9877026664105905, 0.9812852116480344, 0.006371981893818405, 0.01274396378763681, 0.16952304302373508, 0.035406711517615555, 0.15557494454709866, 0.639466668621178, 0.1312204319669644, 0.15537543685640562, 0.6006109323861057, 0.11294096880738727, 0.4959398056291987, 0.005898643616815721, 0.43786085309439776, 0.060347661618191606, 0.003563054647220516, 0.06888572317959664, 0.007126109294441032, 0.9204557838652999, 0.9734390898729562, 0.0020711469997296943, 0.016569175997837554, 0.00724901449905393, 0.9895444208707361, 0.4974098555249022, 0.024196173195389976, 0.16976987094470344, 0.3086003728854656, 0.929601626947334, 0.035301327605594957, 0.014708886502331233, 0.017650663802797478, 0.01870299714021412, 0.9725558512911342, 0.14353965616177194, 0.1265275487648212, 0.6826108093026487, 0.04784655205392398, 0.1605670296131062, 0.33982238333795156, 0.4286872714611196, 0.0709393527506835, 0.05164434139276861, 0.003037902434868742, 0.9447876572441788, 0.003037902434868742, 0.7184520471660348, 0.10193253856296725, 0.13418655438844723, 0.045303350472429886, 0.9949184337375309, 0.020026845361083904, 0.9512751546514854, 0.020026845361083904, 0.003252140846535051, 0.006504281693070102, 0.9886508173466555, 0.9838919888499243, 0.995622941329365, 0.010723683850337931, 0.9865789142310897, 0.006260343432911399, 0.9390515149367099, 0.050082747463291194, 0.006260343432911399, 0.9781367212281067, 0.5089296492018427, 0.15545487466529015, 0.0043181909629247265, 0.33188381972192893, 0.9879646889022488, 0.008781908345797767, 0.16179593105424767, 0.7116024745441448, 0.09288284930891995, 0.03445654087266385, 0.22199262279278303, 0.49120467087574365, 0.06868280042207651, 0.2181087739593918, 0.011847949091241032, 0.9833797745730057, 0.9954934268005787, 0.9914993860406109, 0.994938104067627, 0.13089435280665634, 0.02226094435487353, 0.035617510967797646, 0.8120792500657864, 0.0018702653716906098, 0.03740530743381219, 0.007481061486762439, 0.9519650741905203, 0.002920328525015339, 0.18982135412599704, 0.7140203243662504, 0.09345051280049085, 0.003877999635796478, 0.9501099107701372, 0.046535995629557736, 0.9916154317351679, 0.03058085378694413, 0.09452263897782731, 0.002780077616994921, 0.8757244493534001, 0.9139377664799405, 0.018892770366510398, 0.059039907395344995, 0.009446385183255199, 0.770386530173988, 0.07515966148038906, 0.06693907350597152, 0.08807772829733093, 0.03644605071478025, 0.9163578465430462, 0.005206578673540035, 0.04165262938832028, 0.9832822361640644, 0.7762240762260082, 0.07961272576677007, 0.10211197435303118, 0.04240243002795363, 0.004434317881239364, 0.004434317881239364, 0.026605907287436184, 0.9644641391695616, 0.27348963217618116, 0.5675971080197463, 0.0903546678364767, 0.06791760266902946, 0.9886051071672081, 0.010012656026895867, 0.9912529466626908, 0.2092433114726566, 0.20314884608995787, 0.3291011306657317, 0.2579990345342465, 0.011203735927308717, 0.03921307574558051, 0.019606537872790254, 0.9299100819666235, 0.9845562979656113, 0.011316739057075993, 0.005658369528537996, 0.9979520720010477, 0.9848500826290201, 0.01901343253835265, 0.9791917757251616, 0.9881637325057269, 0.7957867687333902, 0.04423963505863983, 0.1400921776856928, 0.020013168240813256, 0.9853975961806342, 0.010888371228515294, 0.8368359168717336, 0.027663997251958138, 0.11065598900783255, 0.024699997546391194, 0.9706889650481694, 0.010745634299426229, 0.007163756199617487, 0.010745634299426229, 0.08566995354570446, 0.9090533959571973, 0.9914491994479006, 0.006234936899168877, 0.6437572348391867, 0.2671670461293864, 0.08292466075894607, 0.9839001527235097, 0.012916037836620972, 0.41705206382984034, 0.2654585671158153, 0.30454657635822086, 0.10520439471864347, 0.4828611962727482, 0.1551090434954359, 0.25626711534028535, 0.9867137603418898, 0.9881543460476153, 0.030941069625511394, 0.0034378966250568216, 0.9660489516409668, 0.030805499698934896, 0.08708477799506595, 0.00592413455748748, 0.876771914508147, 0.03432043608408195, 0.1935672595142222, 0.7186699316006762, 0.053539880291167845, 0.047230762334547094, 0.024739923127619905, 0.9086299039598583, 0.017992671365541748, 0.005637797506755653, 0.015034126684681742, 0.8456696260133479, 0.13342787432655046, 0.9885446697823035, 0.06930585138919881, 0.11592978777829621, 0.5922500027804263, 0.22303883083433074, 0.42474113653205275, 0.22756011135391185, 0.05547485301662528, 0.29228077320664136, 0.8080343875922957, 0.0860092625448382, 0.01810721316733436, 0.0871409633677966, 0.20435022916205206, 0.4179987107368552, 0.2324563103187769, 0.14539085590847137, 0.988036799100981, 0.9962560570179814, 0.004524063723136485, 0.004524063723136485, 0.00904812744627297, 0.9862458916437538, 0.02317669347802257, 0.06953008043406772, 0.008691260054258465, 0.8980968722733746, 0.01390254664437358, 0.9731782651061506, 0.00695127332218679, 0.44643719749240784, 0.050117551629322854, 0.29963897889020685, 0.20366919917448223, 0.9927084402550681, 0.9787617537371818, 0.21949026878323083, 0.491769336387745, 0.11252349222431454, 0.17573113291821962, 0.2867125884263516, 0.24243092500324892, 0.13910704368267604, 0.33188883090850685, 0.025019022401291065, 0.015011413440774639, 0.9607304602095769, 0.9901648964180148, 0.916765581982145, 0.0028208171753296768, 0.07898288090923095, 0.2822186297239679, 0.0016504013434150168, 0.7113229790118722, 0.0033008026868300336, 0.9942026571017235, 0.004946281876127978, 0.018811328378312425, 0.40584440373635744, 0.33019884919378195, 0.24534775097671313, 0.9794924254912394, 0.01063364559480783, 0.01063364559480783, 0.9782953947223203, 0.07059440918253328, 0.028678978730404144, 0.8949312080744063, 0.006618225860862495, 0.975367669654804, 0.9922273208901423, 0.9805030178460108, 0.9773532363518245, 0.07780367965335058, 0.35583741723811807, 0.05549233034099269, 0.5108726906650152, 0.07334666046165901, 0.6193717994540094, 0.05704740258129034, 0.24992195416565294, 0.9941977929544932, 0.03309021158176015, 0.9596161358710442, 0.0055150352636266905, 0.9918340389006296, 0.10708290398111553, 0.015297557711587932, 0.021181233754506368, 0.8554864966403405, 0.9845623296752557, 0.10875161760692376, 0.09395547915700216, 0.6118203249042581, 0.18569153754651607, 0.9930000133082656, 0.9869610607808287, 0.9916357096184373, 0.7041179668011099, 0.17282895548754515, 0.10526207988541846, 0.017780756737401766, 0.9889749345308829, 0.42599287385043744, 0.15592711341524065, 0.36549315384532405, 0.05176780165385989, 0.007216889558699391, 0.021650668676098172, 0.9670632008657184, 0.007216889558699391, 0.00710745536572512, 0.890801072504215, 0.06870540186867616, 0.03079897325147552, 0.009882716709781025, 0.9882716709781025, 0.9925996087623155, 0.047640499283065435, 0.00794008321384424, 0.00397004160692212, 0.9408998608405424, 0.9929133740890452, 0.007697002899915079, 0.19033263952118262, 0.6715802077414086, 0.0371380760041332, 0.10058228917786075, 0.9905472429508942, 0.012126159625827691, 0.03637847887748308, 0.9519035306274738, 0.023698360584154032, 0.004739672116830807, 0.9716327839503153, 0.9915541723239467, 0.9944269826229616, 0.9194602006644206, 0.012666793688245664, 0.058863335374788675, 0.009686371643952568, 0.9857372537672958, 0.0016679141349700438, 0.0016679141349700438, 0.011675398944790307, 0.9374247831917163, 0.0172230275127087, 0.02706475751997081, 0.0172230275127087, 0.9784403570518069, 0.016583734865284864, 0.005252860403162996, 0.9927906161978063, 0.9909308893011449, 0.026100731152379954, 0.9657270526380584, 0.006525182788094989, 0.9914798269491174], \"Term\": [\"abil\", \"abil\", \"abil\", \"abil\", \"action\", \"action\", \"action\", \"action\", \"activ\", \"activ\", \"activ\", \"activ\", \"actor\", \"actor\", \"actor\", \"addit\", \"addit\", \"addit\", \"addit\", \"address\", \"address\", \"address\", \"address\", \"advers\", \"advers\", \"advers\", \"advers\", \"affect\", \"affect\", \"affect\", \"affect\", \"agent\", \"aggress\", \"agreement\", \"agreement\", \"agreement\", \"agreement\", \"also\", \"also\", \"also\", \"also\", \"analysi\", \"analysi\", \"analysi\", \"annual\", \"annual\", \"annual\", \"applic\", \"applic\", \"applic\", \"applic\", \"arrang\", \"arrang\", \"arrang\", \"arrang\", \"asset\", \"asset\", \"asset\", \"asset\", \"assumpt\", \"assumpt\", \"assumpt\", \"attack\", \"attack\", \"attack\", \"attack\", \"attempt\", \"attempt\", \"attempt\", \"attempt\", \"attent\", \"attent\", \"autom\", \"back\", \"bank\", \"bank\", \"bank\", \"bank\", \"behavior\", \"behavior\", \"billion\", \"borrow\", \"borrow\", \"borrow\", \"breach\", \"breach\", \"breach\", \"breach\", \"brokerag\", \"brokerag\", \"brought\", \"brought\", \"buffer\", \"busi\", \"busi\", \"busi\", \"busi\", \"call\", \"capac\", \"capit\", \"capit\", \"capit\", \"capit\", \"catastroph\", \"catastroph\", \"certain\", \"certain\", \"certain\", \"certain\", \"chang\", \"chang\", \"chang\", \"chang\", \"choos\", \"civil\", \"civil\", \"civil\", \"claim\", \"claim\", \"claim\", \"claim\", \"clear\", \"clear\", \"clear\", \"clear\", \"client\", \"client\", \"client\", \"client\", \"collater\", \"collater\", \"collater\", \"collater\", \"commenc\", \"committe\", \"compani\", \"compani\", \"compani\", \"compani\", \"compel\", \"competit\", \"competit\", \"competit\", \"competit\", \"complianc\", \"complianc\", \"complianc\", \"complianc\", \"compound\", \"compound\", \"comprehens\", \"comprehens\", \"condit\", \"condit\", \"condit\", \"condit\", \"conduct\", \"conduct\", \"conduct\", \"conduct\", \"confid\", \"confidenti\", \"confidenti\", \"confidenti\", \"confidenti\", \"conserv\", \"continu\", \"continu\", \"continu\", \"continu\", \"corrupt\", \"corrupt\", \"cost\", \"cost\", \"cost\", \"cost\", \"could\", \"could\", \"could\", \"could\", \"counterparti\", \"counterparti\", \"counterparti\", \"counterparti\", \"cover\", \"cover\", \"cover\", \"credit\", \"credit\", \"credit\", \"credit\", \"crime\", \"crime\", \"crime\", \"crimin\", \"crimin\", \"crimin\", \"custom\", \"custom\", \"custom\", \"custom\", \"cyber\", \"cyber\", \"cyber\", \"cyber\", \"damag\", \"damag\", \"damag\", \"damag\", \"dealer\", \"declin\", \"declin\", \"declin\", \"declin\", \"decreas\", \"decreas\", \"decreas\", \"decreas\", \"default\", \"default\", \"default\", \"default\", \"destruct\", \"destruct\", \"develop\", \"develop\", \"develop\", \"develop\", \"dilut\", \"directli\", \"directli\", \"disadvantag\", \"disast\", \"disast\", \"disast\", \"disast\", \"discov\", \"discov\", \"disposit\", \"disposit\", \"disrupt\", \"disrupt\", \"disrupt\", \"disrupt\", \"diversifi\", \"divert\", \"dividend\", \"dividend\", \"dividend\", \"document\", \"downgrad\", \"downgrad\", \"downgrad\", \"earn\", \"earn\", \"earn\", \"earn\", \"econom\", \"econom\", \"econom\", \"econom\", \"effort\", \"effort\", \"effort\", \"effort\", \"elig\", \"employ\", \"employ\", \"employ\", \"employe\", \"employe\", \"employe\", \"employe\", \"enabl\", \"enhanc\", \"enhanc\", \"enhanc\", \"enhanc\", \"enter\", \"enter\", \"enter\", \"enter\", \"environment\", \"environment\", \"equiti\", \"equiti\", \"equiti\", \"estat\", \"estat\", \"estat\", \"event\", \"event\", \"event\", \"event\", \"exchang\", \"exchang\", \"exchang\", \"exchang\", \"exist\", \"exist\", \"exist\", \"exist\", \"expand\", \"expand\", \"expand\", \"expenditur\", \"extend\", \"extend\", \"extend\", \"extend\", \"extens\", \"extens\", \"extens\", \"extens\", \"face\", \"face\", \"face\", \"face\", \"facilit\", \"facilit\", \"failur\", \"failur\", \"failur\", \"failur\", \"favor\", \"fdic\", \"feder\", \"feder\", \"feder\", \"feder\", \"file\", \"financi\", \"financi\", \"financi\", \"financi\", \"fine\", \"fine\", \"fine\", \"fine\", \"flow\", \"flow\", \"fluctuat\", \"fluctuat\", \"fluctuat\", \"fraud\", \"fulli\", \"fulli\", \"fund\", \"fund\", \"fund\", \"fund\", \"furthermor\", \"give\", \"goldman\", \"goldman\", \"goldman\", \"goldman\", \"government\", \"government\", \"government\", \"government\", \"group\", \"group\", \"group\", \"group\", \"guidanc\", \"harm\", \"harm\", \"harm\", \"harm\", \"heavili\", \"hold\", \"hold\", \"hold\", \"hold\", \"hous\", \"hous\", \"human\", \"human\", \"human\", \"hurrican\", \"illiquid\", \"illiquid\", \"impact\", \"impact\", \"impact\", \"impact\", \"incid\", \"incid\", \"incid\", \"includ\", \"includ\", \"includ\", \"includ\", \"incom\", \"incom\", \"incom\", \"incom\", \"increas\", \"increas\", \"increas\", \"increas\", \"indirectli\", \"inflat\", \"inflat\", \"inform\", \"inform\", \"inform\", \"inform\", \"initi\", \"initi\", \"initi\", \"initi\", \"injunct\", \"insuffici\", \"integr\", \"integr\", \"integr\", \"integr\", \"interconnect\", \"interest\", \"interest\", \"interest\", \"interest\", \"intermediari\", \"intermediari\", \"invest\", \"invest\", \"invest\", \"invest\", \"investig\", \"investig\", \"investig\", \"investig\", \"item\", \"jurisdict\", \"jurisdict\", \"jurisdict\", \"jurisdict\", \"lack\", \"lawsuit\", \"lawsuit\", \"legisl\", \"legisl\", \"legisl\", \"liabil\", \"liabil\", \"liabil\", \"liabil\", \"limit\", \"limit\", \"limit\", \"limit\", \"liquid\", \"liquid\", \"liquid\", \"liquid\", \"litig\", \"litig\", \"litig\", \"litig\", \"loan\", \"loan\", \"loan\", \"loan\", \"london\", \"loss\", \"loss\", \"loss\", \"loss\", \"lower\", \"lower\", \"lower\", \"lower\", \"macroeconom\", \"macroeconom\", \"make\", \"make\", \"make\", \"make\", \"manag\", \"manag\", \"manag\", \"manag\", \"margin\", \"margin\", \"margin\", \"margin\", \"market\", \"market\", \"market\", \"market\", \"mean\", \"minimum\", \"minimum\", \"minimum\", \"misconduct\", \"misconduct\", \"misconduct\", \"mishandl\", \"modif\", \"modifi\", \"modifi\", \"multipl\", \"multipl\", \"multipl\", \"multipl\", \"necessarili\", \"neg\", \"neg\", \"neg\", \"neg\", \"note\", \"note\", \"offer\", \"offer\", \"offer\", \"offer\", \"oper\", \"oper\", \"oper\", \"oper\", \"option\", \"option\", \"orderli\", \"owe\", \"parent\", \"parti\", \"parti\", \"parti\", \"parti\", \"penalti\", \"penalti\", \"penalti\", \"penalti\", \"plan\", \"plan\", \"plan\", \"plan\", \"platform\", \"platform\", \"platform\", \"point\", \"polit\", \"polit\", \"polit\", \"polit\", \"portfolio\", \"portfolio\", \"portfolio\", \"portfolio\", \"posit\", \"posit\", \"posit\", \"posit\", \"present\", \"present\", \"present\", \"present\", \"previou\", \"price\", \"price\", \"price\", \"price\", \"proceed\", \"proceed\", \"proceed\", \"proceed\", \"product\", \"product\", \"product\", \"product\", \"promot\", \"prove\", \"prove\", \"provid\", \"provid\", \"provid\", \"provid\", \"public\", \"public\", \"public\", \"public\", \"pursu\", \"pursu\", \"pursu\", \"qualifi\", \"qualit\", \"quantit\", \"quantit\", \"quarter\", \"rate\", \"rate\", \"rate\", \"rate\", \"real\", \"real\", \"reduc\", \"reduc\", \"reduc\", \"reduc\", \"reduct\", \"reduct\", \"reduct\", \"reduct\", \"reform\", \"reform\", \"regim\", \"regul\", \"regul\", \"regul\", \"regul\", \"regularli\", \"regulatori\", \"regulatori\", \"regulatori\", \"regulatori\", \"relat\", \"relat\", \"relat\", \"relat\", \"reliabl\", \"reorgan\", \"repurchas\", \"repurchas\", \"repurchas\", \"reput\", \"reput\", \"reput\", \"reput\", \"requir\", \"requir\", \"requir\", \"requir\", \"reserv\", \"reserv\", \"reserv\", \"reserv\", \"resolut\", \"resolut\", \"resolut\", \"resolut\", \"restat\", \"restrict\", \"restrict\", \"restrict\", \"restrict\", \"result\", \"result\", \"result\", \"result\", \"revenu\", \"revenu\", \"revenu\", \"revenu\", \"risk\", \"risk\", \"risk\", \"risk\", \"routin\", \"rulemak\", \"sach\", \"sach\", \"sach\", \"sach\", \"sanction\", \"sanction\", \"sanction\", \"sanction\", \"satisfi\", \"satisfi\", \"satisfi\", \"secur\", \"secur\", \"secur\", \"secur\", \"separ\", \"serious\", \"servic\", \"servic\", \"servic\", \"servic\", \"signific\", \"signific\", \"signific\", \"signific\", \"social\", \"social\", \"social\", \"spend\", \"spread\", \"spread\", \"spread\", \"stock\", \"stock\", \"stock\", \"stock\", \"stockhold\", \"stockhold\", \"subject\", \"subject\", \"subject\", \"subject\", \"submit\", \"subsequ\", \"subsequ\", \"subsequ\", \"subsidiari\", \"subsidiari\", \"subsidiari\", \"subsidiari\", \"successor\", \"sudden\", \"suitabl\", \"syndic\", \"system\", \"system\", \"system\", \"system\", \"technolog\", \"technolog\", \"technolog\", \"technolog\", \"terrorist\", \"test\", \"test\", \"test\", \"therebi\", \"third\", \"third\", \"third\", \"third\", \"thu\", \"time\", \"time\", \"time\", \"time\", \"tlac\", \"tool\", \"toward\", \"trade\", \"trade\", \"trade\", \"trade\", \"tradit\", \"transact\", \"transact\", \"transact\", \"transact\", \"transfer\", \"transfer\", \"transfer\", \"transfer\", \"transit\", \"transit\", \"transit\", \"transit\", \"transmiss\", \"transmiss\", \"ultim\", \"unauthor\", \"unauthor\", \"unauthor\", \"unauthor\", \"unavail\", \"unavail\", \"uncertainti\", \"uncertainti\", \"uncertainti\", \"uncertainti\", \"underwrit\", \"unforeseen\", \"unforeseen\", \"unforeseen\", \"unsecur\", \"unsecur\", \"unsecur\", \"usag\", \"util\", \"valu\", \"valu\", \"valu\", \"valu\", \"volatil\", \"volatil\", \"volatil\", \"volatil\", \"volum\", \"volum\", \"volum\", \"volum\", \"vulner\", \"vulner\", \"weather\", \"weather\", \"widespread\", \"world\", \"world\", \"world\", \"worldwid\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [4, 1, 2, 3]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el65240113335077128726418025\", ldavis_el65240113335077128726418025_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el65240113335077128726418025\", ldavis_el65240113335077128726418025_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el65240113335077128726418025\", ldavis_el65240113335077128726418025_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualize Models\n",
    "pyLDAvis.enable_notebook()\n",
    "corpora =  gensim.corpora.MmCorpus('corpus.mm')\n",
    "vis =pyLDAvis.gensim.prepare(ldamodel, corpora, corpdict)\n",
    "pyLDAvis.display(vis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "KYm-RcAhTOiP"
   },
   "outputs": [],
   "source": [
    "#Split into test/train\n",
    "X = merged['newRisk Sentence']\n",
    "y = merged['Label']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)\n",
    "\n",
    "vectorizer = TfidfVectorizer(max_features=1000)\n",
    "X_train_tfidf = vectorizer.fit_transform(X_train)\n",
    "X_test_tfidf = vectorizer.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.94      0.94      1279\n",
      "           1       0.97      0.93      0.95      1046\n",
      "           2       0.94      0.95      0.94      1412\n",
      "           3       0.95      0.97      0.96      1371\n",
      "\n",
      "    accuracy                           0.95      5108\n",
      "   macro avg       0.95      0.95      0.95      5108\n",
      "weighted avg       0.95      0.95      0.95      5108\n",
      "\n",
      "Accuracy: 0.9489036805011746\n",
      "Precision: 0.9491360168231078\n",
      "Recall: 0.9489036805011746\n"
     ]
    }
   ],
   "source": [
    "text_clf = Pipeline([('vect', CountVectorizer()),\n",
    "                     ('tfidf', TfidfTransformer()),\n",
    "                     ('clf', RandomForestClassifier(n_estimators=100)),\n",
    "                     ])\n",
    "\n",
    "text_clf.fit(X_train, y_train)\n",
    "predicted = text_clf.predict(X_test)\n",
    "\n",
    "print(metrics.classification_report(y_test, predicted))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, predicted))\n",
    "precision = precision_score(y_test, predicted, average='weighted')\n",
    "recall = recall_score(y_test, predicted, average='weighted')\n",
    "print(\"Precision:\",precision)\n",
    "print(\"Recall:\",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 3285 unique tokens.\n",
      "(25537, 500)\n",
      "Total 400000 word vectors.\n",
      "256\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       (None, 500, 50)           164300    \n",
      "                                                                 \n",
      " gru (GRU)                   (None, 500, 256)          236544    \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 500, 256)          0         \n",
      "                                                                 \n",
      " gru_1 (GRU)                 (None, 500, 256)          394752    \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 500, 256)          0         \n",
      "                                                                 \n",
      " gru_2 (GRU)                 (None, 500, 256)          394752    \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 500, 256)          0         \n",
      "                                                                 \n",
      " gru_3 (GRU)                 (None, 256)               394752    \n",
      "                                                                 \n",
      " dense (Dense)               (None, 4)                 1028      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1586128 (6.05 MB)\n",
      "Trainable params: 1586128 (6.05 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n",
      "Epoch 1/10\n",
      "20/20 [==============================] - 488s 24s/step - loss: 1.3484 - accuracy: 0.3357 - val_loss: 1.2940 - val_accuracy: 0.3857\n",
      "Epoch 2/10\n",
      "20/20 [==============================] - 506s 25s/step - loss: 1.2190 - accuracy: 0.4407 - val_loss: 1.1347 - val_accuracy: 0.4918\n",
      "Epoch 3/10\n",
      "20/20 [==============================] - 495s 25s/step - loss: 1.0976 - accuracy: 0.5089 - val_loss: 1.0643 - val_accuracy: 0.5270\n",
      "Epoch 4/10\n",
      "20/20 [==============================] - 497s 25s/step - loss: 1.0165 - accuracy: 0.5614 - val_loss: 0.9788 - val_accuracy: 0.5805\n",
      "Epoch 5/10\n",
      "20/20 [==============================] - 505s 25s/step - loss: 0.9531 - accuracy: 0.5965 - val_loss: 0.9290 - val_accuracy: 0.6045\n",
      "Epoch 6/10\n",
      "20/20 [==============================] - 518s 26s/step - loss: 0.8896 - accuracy: 0.6290 - val_loss: 0.8581 - val_accuracy: 0.6419\n",
      "Epoch 7/10\n",
      "20/20 [==============================] - 528s 27s/step - loss: 0.8089 - accuracy: 0.6698 - val_loss: 0.8238 - val_accuracy: 0.6607\n",
      "Epoch 8/10\n",
      "20/20 [==============================] - 521s 26s/step - loss: 0.7447 - accuracy: 0.6958 - val_loss: 0.7490 - val_accuracy: 0.6948\n",
      "Epoch 9/10\n",
      "20/20 [==============================] - 522s 26s/step - loss: 0.6739 - accuracy: 0.7333 - val_loss: 0.7151 - val_accuracy: 0.7157\n",
      "Epoch 10/10\n",
      "20/20 [==============================] - 522s 26s/step - loss: 0.6099 - accuracy: 0.7607 - val_loss: 0.6371 - val_accuracy: 0.7537\n",
      "160/160 [==============================] - 262s 2s/step\n"
     ]
    }
   ],
   "source": [
    "def loadData_Tokenizer(X_train, X_test,MAX_NB_WORDS=75000,MAX_SEQUENCE_LENGTH=500):\n",
    "    np.random.seed(7)\n",
    "    text = np.concatenate((X_train, X_test), axis=0)\n",
    "    text = np.array(text)\n",
    "    tokenizer = Tokenizer(num_words=MAX_NB_WORDS)\n",
    "    tokenizer.fit_on_texts(text)\n",
    "    sequences = tokenizer.texts_to_sequences(text)\n",
    "    word_index = tokenizer.word_index\n",
    "    text = pad_sequences(sequences, maxlen=MAX_SEQUENCE_LENGTH)\n",
    "    print('Found %s unique tokens.' % len(word_index))\n",
    "    indices = np.arange(text.shape[0])\n",
    "    # np.random.shuffle(indices)\n",
    "    text = text[indices]\n",
    "    print(text.shape)\n",
    "    X_train = text[0:len(X_train), ]\n",
    "    X_test = text[len(X_train):, ]\n",
    "    embeddings_index = {}\n",
    "    f = open(\"/Users/vsivakumar/Desktop/Scripts/glove.6B.50d.txt\", encoding=\"utf8\")\n",
    "    for line in f:\n",
    "\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        try:\n",
    "            coefs = np.asarray(values[1:], dtype='float32')\n",
    "        except:\n",
    "            pass\n",
    "        embeddings_index[word] = coefs\n",
    "    f.close()\n",
    "    print('Total %s word vectors.' % len(embeddings_index))\n",
    "    return (X_train, X_test, word_index,embeddings_index)\n",
    "\n",
    "\n",
    "\n",
    "def Build_Model_RNN_Text(word_index, embeddings_index, nclasses,  MAX_SEQUENCE_LENGTH=500, EMBEDDING_DIM=50, dropout=0.5):\n",
    "\n",
    "    model = Sequential()\n",
    "    hidden_layer = 3\n",
    "    gru_node = 256\n",
    "\n",
    "    embedding_matrix = np.random.random((len(word_index) + 1, EMBEDDING_DIM))\n",
    "    for word, i in word_index.items():\n",
    "        embedding_vector = embeddings_index.get(word)\n",
    "        if embedding_vector is not None:\n",
    "            # words not found in embedding index will be all-zeros.\n",
    "            if len(embedding_matrix[i]) != len(embedding_vector):\n",
    "                print(\"could not broadcast input array from shape\", str(len(embedding_matrix[i])),\n",
    "                      \"into shape\", str(len(embedding_vector)), \" Please make sure your\"\n",
    "                                                                \" EMBEDDING_DIM is equal to embedding_vector file ,GloVe,\")\n",
    "                exit(1)\n",
    "            embedding_matrix[i] = embedding_vector\n",
    "    model.add(Embedding(len(word_index) + 1,\n",
    "                                EMBEDDING_DIM,\n",
    "                                weights=[embedding_matrix],\n",
    "                                input_length=MAX_SEQUENCE_LENGTH,\n",
    "                                trainable=True))\n",
    "\n",
    "\n",
    "    print(gru_node)\n",
    "    for i in range(0,hidden_layer):\n",
    "        model.add(GRU(gru_node,return_sequences=True, recurrent_dropout=0.2))\n",
    "        model.add(Dropout(dropout))\n",
    "    model.add(GRU(gru_node, recurrent_dropout=0.2))\n",
    "    model.add(Dense(nclasses, activation='softmax'))\n",
    "\n",
    "\n",
    "    model.compile(loss='sparse_categorical_crossentropy',\n",
    "                      optimizer='adam',\n",
    "                      metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "\n",
    "\n",
    "X_train_Glove,X_test_Glove, word_index,embeddings_index = loadData_Tokenizer(X_train,X_test)\n",
    "\n",
    "\n",
    "model_RNN = Build_Model_RNN_Text(word_index,embeddings_index, 4)\n",
    "\n",
    "model_RNN.summary()\n",
    "\n",
    "model_RNN.fit(X_train_Glove, y_train,\n",
    "                              validation_data=(X_test_Glove, y_test),\n",
    "                              epochs=10,\n",
    "                              batch_size=1024,\n",
    "                              verbose=1)\n",
    "\n",
    "predicted = model_RNN.predict(X_test_Glove)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160/160 [==============================] - 268s 2s/step\n"
     ]
    }
   ],
   "source": [
    "predicted = model_RNN.predict(X_test_Glove)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted=np.argmax(predicted,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7537196554424432\n",
      "Precision: 0.7552914774464207\n",
      "Recall: 0.7537196554424432\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy:\", accuracy_score(y_test, predicted))\n",
    "precision = precision_score(y_test, predicted, average='weighted')\n",
    "recall = recall_score(y_test, predicted, average='weighted')\n",
    "print(\"Precision:\",precision)\n",
    "print(\"Recall:\",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RCNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 3285 unique tokens.\n",
      "(25537, 500)\n",
      "Total 400000 word vectors.\n",
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding_2 (Embedding)     (None, 500, 50)           164300    \n",
      "                                                                 \n",
      " dropout_4 (Dropout)         (None, 500, 50)           0         \n",
      "                                                                 \n",
      " conv1d_4 (Conv1D)           (None, 499, 256)          25856     \n",
      "                                                                 \n",
      " max_pooling1d_4 (MaxPoolin  (None, 249, 256)          0         \n",
      " g1D)                                                            \n",
      "                                                                 \n",
      " conv1d_5 (Conv1D)           (None, 248, 256)          131328    \n",
      "                                                                 \n",
      " max_pooling1d_5 (MaxPoolin  (None, 124, 256)          0         \n",
      " g1D)                                                            \n",
      "                                                                 \n",
      " conv1d_6 (Conv1D)           (None, 123, 256)          131328    \n",
      "                                                                 \n",
      " max_pooling1d_6 (MaxPoolin  (None, 61, 256)           0         \n",
      " g1D)                                                            \n",
      "                                                                 \n",
      " conv1d_7 (Conv1D)           (None, 60, 256)           131328    \n",
      "                                                                 \n",
      " max_pooling1d_7 (MaxPoolin  (None, 30, 256)           0         \n",
      " g1D)                                                            \n",
      "                                                                 \n",
      " lstm_4 (LSTM)               (None, 30, 256)           525312    \n",
      "                                                                 \n",
      " lstm_5 (LSTM)               (None, 30, 256)           525312    \n",
      "                                                                 \n",
      " lstm_6 (LSTM)               (None, 30, 256)           525312    \n",
      "                                                                 \n",
      " lstm_7 (LSTM)               (None, 256)               525312    \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 1024)              263168    \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 4)                 4100      \n",
      "                                                                 \n",
      " activation_1 (Activation)   (None, 4)                 0         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 2952656 (11.26 MB)\n",
      "Trainable params: 2952656 (11.26 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n",
      "Epoch 1/15\n",
      "40/40 [==============================] - 63s 2s/step - loss: 1.3852 - accuracy: 0.2718 - val_loss: 1.3824 - val_accuracy: 0.2764\n",
      "Epoch 2/15\n",
      "40/40 [==============================] - 61s 2s/step - loss: 1.3839 - accuracy: 0.2731 - val_loss: 1.3807 - val_accuracy: 0.2764\n",
      "Epoch 3/15\n",
      "40/40 [==============================] - 62s 2s/step - loss: 1.3786 - accuracy: 0.2828 - val_loss: 1.3213 - val_accuracy: 0.3340\n",
      "Epoch 4/15\n",
      "40/40 [==============================] - 61s 2s/step - loss: 1.2755 - accuracy: 0.3404 - val_loss: 1.2782 - val_accuracy: 0.3383\n",
      "Epoch 5/15\n",
      "40/40 [==============================] - 65s 2s/step - loss: 1.2653 - accuracy: 0.3471 - val_loss: 1.2762 - val_accuracy: 0.3377\n",
      "Epoch 6/15\n",
      "40/40 [==============================] - 65s 2s/step - loss: 1.2597 - accuracy: 0.3502 - val_loss: 1.2651 - val_accuracy: 0.3408\n",
      "Epoch 7/15\n",
      "40/40 [==============================] - 65s 2s/step - loss: 1.2482 - accuracy: 0.3564 - val_loss: 1.2493 - val_accuracy: 0.3659\n",
      "Epoch 8/15\n",
      "40/40 [==============================] - 65s 2s/step - loss: 1.2107 - accuracy: 0.4022 - val_loss: 1.1663 - val_accuracy: 0.4329\n",
      "Epoch 9/15\n",
      "40/40 [==============================] - 61s 2s/step - loss: 1.1338 - accuracy: 0.4611 - val_loss: 1.1069 - val_accuracy: 0.4838\n",
      "Epoch 10/15\n",
      "40/40 [==============================] - 62s 2s/step - loss: 1.0700 - accuracy: 0.4972 - val_loss: 1.0408 - val_accuracy: 0.5153\n",
      "Epoch 11/15\n",
      "40/40 [==============================] - 61s 2s/step - loss: 1.0101 - accuracy: 0.5382 - val_loss: 0.9916 - val_accuracy: 0.5515\n",
      "Epoch 12/15\n",
      "40/40 [==============================] - 61s 2s/step - loss: 0.9626 - accuracy: 0.5658 - val_loss: 0.9404 - val_accuracy: 0.5832\n",
      "Epoch 13/15\n",
      "40/40 [==============================] - 63s 2s/step - loss: 0.9314 - accuracy: 0.5841 - val_loss: 0.9328 - val_accuracy: 0.5969\n",
      "Epoch 14/15\n",
      "40/40 [==============================] - 62s 2s/step - loss: 0.8859 - accuracy: 0.6070 - val_loss: 0.8954 - val_accuracy: 0.6186\n",
      "Epoch 15/15\n",
      "40/40 [==============================] - 61s 2s/step - loss: 0.8489 - accuracy: 0.6304 - val_loss: 0.8530 - val_accuracy: 0.6554\n",
      "160/160 [==============================] - 31s 194ms/step\n"
     ]
    }
   ],
   "source": [
    "def loadData_Tokenizer(X_train, X_test,MAX_NB_WORDS=75000,MAX_SEQUENCE_LENGTH=500):\n",
    "    np.random.seed(7)\n",
    "    text = np.concatenate((X_train, X_test), axis=0)\n",
    "    text = np.array(text)\n",
    "    tokenizer = Tokenizer(num_words=MAX_NB_WORDS)\n",
    "    tokenizer.fit_on_texts(text)\n",
    "    sequences = tokenizer.texts_to_sequences(text)\n",
    "    word_index = tokenizer.word_index\n",
    "    text = pad_sequences(sequences, maxlen=MAX_SEQUENCE_LENGTH)\n",
    "    print('Found %s unique tokens.' % len(word_index))\n",
    "    indices = np.arange(text.shape[0])\n",
    "    text = text[indices]\n",
    "    print(text.shape)\n",
    "    X_train = text[0:len(X_train), ]\n",
    "    X_test = text[len(X_train):, ]\n",
    "    embeddings_index = {}\n",
    "    f = open(\"/Users/vsivakumar/Desktop/Scripts/glove.6B.50d.txt\", encoding=\"utf8\")\n",
    "    for line in f:\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        try:\n",
    "            coefs = np.asarray(values[1:], dtype='float32')\n",
    "        except:\n",
    "            pass\n",
    "        embeddings_index[word] = coefs\n",
    "    f.close()\n",
    "    print('Total %s word vectors.' % len(embeddings_index))\n",
    "    return (X_train, X_test, word_index,embeddings_index)\n",
    "\n",
    "\n",
    "def Build_Model_RCNN_Text(word_index, embeddings_index, nclasses, MAX_SEQUENCE_LENGTH=500, EMBEDDING_DIM=50):\n",
    "\n",
    "    kernel_size = 2\n",
    "    filters = 256\n",
    "    pool_size = 2\n",
    "    gru_node = 256\n",
    "\n",
    "    embedding_matrix = np.random.random((len(word_index) + 1, EMBEDDING_DIM))\n",
    "    for word, i in word_index.items():\n",
    "        embedding_vector = embeddings_index.get(word)\n",
    "        if embedding_vector is not None:\n",
    "            # words not found in embedding index will be all-zeros.\n",
    "            if len(embedding_matrix[i]) !=len(embedding_vector):\n",
    "                print(\"could not broadcast input array from shape\",str(len(embedding_matrix[i])),\n",
    "                                 \"into shape\",str(len(embedding_vector)),\" Please make sure your\"\n",
    "                                 \" EMBEDDING_DIM is equal to embedding_vector file ,GloVe,\")\n",
    "                exit(1)\n",
    "\n",
    "            embedding_matrix[i] = embedding_vector\n",
    "\n",
    "\n",
    "\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(len(word_index) + 1,\n",
    "                                EMBEDDING_DIM,\n",
    "                                weights=[embedding_matrix],\n",
    "                                input_length=MAX_SEQUENCE_LENGTH,\n",
    "                                trainable=True))\n",
    "    model.add(Dropout(0.25))\n",
    "    model.add(Conv1D(filters, kernel_size, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=pool_size))\n",
    "    model.add(Conv1D(filters, kernel_size, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=pool_size))\n",
    "    model.add(Conv1D(filters, kernel_size, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=pool_size))\n",
    "    model.add(Conv1D(filters, kernel_size, activation='relu'))\n",
    "    model.add(MaxPooling1D(pool_size=pool_size))\n",
    "    model.add(LSTM(gru_node, return_sequences=True, recurrent_dropout=0.2))\n",
    "    model.add(LSTM(gru_node, return_sequences=True, recurrent_dropout=0.2))\n",
    "    model.add(LSTM(gru_node, return_sequences=True, recurrent_dropout=0.2))\n",
    "    model.add(LSTM(gru_node, recurrent_dropout=0.2))\n",
    "    model.add(Dense(1024,activation='relu'))\n",
    "    model.add(Dense(nclasses))\n",
    "    model.add(Activation('softmax'))\n",
    "\n",
    "    model.compile(loss='sparse_categorical_crossentropy',\n",
    "                  optimizer='adam',\n",
    "                  metrics=['accuracy'])\n",
    "\n",
    "    return model\n",
    "\n",
    "\n",
    "X_train_Glove,X_test_Glove, word_index,embeddings_index = loadData_Tokenizer(X_train,X_test)\n",
    "model_RCNN = Build_Model_RCNN_Text(word_index,embeddings_index, 4)\n",
    "model_RCNN.summary()\n",
    "model_RCNN.fit(X_train_Glove, y_train,\n",
    "                              validation_data=(X_test_Glove, y_test),\n",
    "                              epochs=15,\n",
    "                              batch_size=512,\n",
    "                              verbose=1)\n",
    "\n",
    "predicted = model_RCNN.predict(X_test_Glove)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.63      0.46      0.53      1279\n",
      "           1       0.91      0.51      0.66      1046\n",
      "           2       0.50      0.78      0.61      1412\n",
      "           3       0.80      0.82      0.81      1371\n",
      "\n",
      "    accuracy                           0.66      5108\n",
      "   macro avg       0.71      0.64      0.65      5108\n",
      "weighted avg       0.70      0.66      0.65      5108\n",
      "\n",
      "Accuracy: 0.6554424432263116\n",
      "Precision: 0.6982918024641718\n",
      "Recall: 0.6554424432263116\n"
     ]
    }
   ],
   "source": [
    "predicted = np.argmax(predicted, axis=1)\n",
    "print(metrics.classification_report(y_test, predicted))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, predicted))\n",
    "precision = precision_score(y_test, predicted, average='weighted')\n",
    "recall = recall_score(y_test, predicted, average='weighted')\n",
    "print(\"Precision:\",precision)\n",
    "print(\"Recall:\",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 74
    },
    "id": "hkRpMCVpi8E4",
    "outputId": "f928fb42-9c8e-4b0d-ebd5-978d31dc8367"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC(kernel='linear')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_model = SVC(kernel='linear', C=1.0)  # Linear kernel, adjust C as needed\n",
    "svm_model.fit(X_train_tfidf, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "muTZTQLojBxz",
    "outputId": "f56f581b-c3d7-4026-9a0e-430fc8c2742f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.70      0.70      0.70      1279\n",
      "           1       0.79      0.72      0.75      1046\n",
      "           2       0.71      0.73      0.72      1412\n",
      "           3       0.78      0.81      0.79      1371\n",
      "\n",
      "    accuracy                           0.74      5108\n",
      "   macro avg       0.74      0.74      0.74      5108\n",
      "weighted avg       0.74      0.74      0.74      5108\n",
      "\n",
      "Accuracy: 0.7402114330462021\n",
      "Precision: 0.7412135320666968\n",
      "Recall: 0.7402114330462021\n"
     ]
    }
   ],
   "source": [
    "y_pred = svm_model.predict(X_test_tfidf)\n",
    "\n",
    "# Print classification report and accuracy score\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "precision = precision_score(y_test, y_pred, average='weighted')\n",
    "recall = recall_score(y_test, y_pred, average='weighted')\n",
    "print(\"Precision:\",precision)\n",
    "print(\"Recall:\",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.89      0.89      1279\n",
      "           1       0.91      0.89      0.90      1046\n",
      "           2       0.90      0.92      0.91      1412\n",
      "           3       0.93      0.94      0.93      1371\n",
      "\n",
      "    accuracy                           0.91      5108\n",
      "   macro avg       0.91      0.91      0.91      5108\n",
      "weighted avg       0.91      0.91      0.91      5108\n",
      "\n",
      "Accuracy: 0.9095536413469069\n",
      "Precision: 0.9095438552494018\n",
      "Recall: 0.9095536413469069\n"
     ]
    }
   ],
   "source": [
    "text_clf = Pipeline([('vect', CountVectorizer()),\n",
    "                     ('tfidf', TfidfTransformer()),\n",
    "                     ('clf', tree.DecisionTreeClassifier()),\n",
    "                     ])\n",
    "\n",
    "text_clf.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "predicted = text_clf.predict(X_test)\n",
    "\n",
    "print(metrics.classification_report(y_test, predicted))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, predicted))\n",
    "precision = precision_score(y_test, predicted, average='weighted')\n",
    "recall = recall_score(y_test, predicted, average='weighted')\n",
    "print(\"Precision:\",precision)\n",
    "print(\"Recall:\",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Boost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Iter       Train Loss   Remaining Time \n",
      "         1           1.3313           12.33s\n",
      "         2           1.2931           12.09s\n",
      "         3           1.2632           11.91s\n",
      "         4           1.2375           11.68s\n",
      "         5           1.2166           11.47s\n",
      "         6           1.1997           11.21s\n",
      "         7           1.1833           10.95s\n",
      "         8           1.1698           10.70s\n",
      "         9           1.1561           10.45s\n",
      "        10           1.1453           10.20s\n",
      "        11           1.1350            9.94s\n",
      "        12           1.1254            9.69s\n",
      "        13           1.1169            9.44s\n",
      "        14           1.1083            9.19s\n",
      "        15           1.1007            8.93s\n",
      "        16           1.0931            8.67s\n",
      "        17           1.0862            8.41s\n",
      "        18           1.0797            8.16s\n",
      "        19           1.0733            7.90s\n",
      "        20           1.0679            7.64s\n",
      "        21           1.0620            7.39s\n",
      "        22           1.0561            7.14s\n",
      "        23           1.0512            6.88s\n",
      "        24           1.0462            6.63s\n",
      "        25           1.0417            6.37s\n",
      "        26           1.0372            6.12s\n",
      "        27           1.0332            5.86s\n",
      "        28           1.0292            5.61s\n",
      "        29           1.0248            5.35s\n",
      "        30           1.0210            5.10s\n",
      "        31           1.0177            4.84s\n",
      "        32           1.0138            4.59s\n",
      "        33           1.0105            4.33s\n",
      "        34           1.0064            4.08s\n",
      "        35           1.0035            3.82s\n",
      "        36           1.0007            3.57s\n",
      "        37           0.9976            3.31s\n",
      "        38           0.9941            3.06s\n",
      "        39           0.9911            2.80s\n",
      "        40           0.9883            2.55s\n",
      "        41           0.9852            2.29s\n",
      "        42           0.9820            2.04s\n",
      "        43           0.9791            1.78s\n",
      "        44           0.9766            1.53s\n",
      "        45           0.9735            1.27s\n",
      "        46           0.9708            1.02s\n",
      "        47           0.9683            0.76s\n",
      "        48           0.9655            0.51s\n",
      "        49           0.9631            0.26s\n",
      "        50           0.9610            0.00s\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.73      0.46      0.56      1279\n",
      "           1       0.96      0.47      0.63      1046\n",
      "           2       0.42      0.85      0.56      1412\n",
      "           3       0.77      0.55      0.64      1371\n",
      "\n",
      "    accuracy                           0.59      5108\n",
      "   macro avg       0.72      0.58      0.60      5108\n",
      "weighted avg       0.71      0.59      0.60      5108\n",
      "\n",
      "Accuracy: 0.5927956147220047\n",
      "Precision: 0.7052812539040706\n",
      "Recall: 0.5927956147220047\n"
     ]
    }
   ],
   "source": [
    "text_clf = Pipeline([('vect', CountVectorizer()),\n",
    "                     ('tfidf', TfidfTransformer()),\n",
    "                     ('clf', GradientBoostingClassifier(n_estimators=50,verbose=2)),\n",
    "                     ])\n",
    "\n",
    "text_clf.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "predicted = text_clf.predict(X_test)\n",
    "\n",
    "print(metrics.classification_report(y_test, predicted))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, predicted))\n",
    "precision = precision_score(y_test, predicted, average='weighted')\n",
    "recall = recall_score(y_test, predicted, average='weighted')\n",
    "print(\"Precision:\",precision)\n",
    "print(\"Recall:\",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "id": "8qMN9c7splAb"
   },
   "outputs": [],
   "source": [
    "vectorizer = CountVectorizer(max_features=1000)  # You can adjust max_features as needed\n",
    "X_train_bow = vectorizer.fit_transform(X_train)\n",
    "X_test_bow = vectorizer.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PGe8NY--pocv",
    "outputId": "397a7333-bdaa-4e2f-e67a-115f572e23e3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.69      0.71      1279\n",
      "           1       0.78      0.74      0.76      1046\n",
      "           2       0.71      0.73      0.72      1412\n",
      "           3       0.77      0.82      0.80      1371\n",
      "\n",
      "    accuracy                           0.75      5108\n",
      "   macro avg       0.75      0.75      0.75      5108\n",
      "weighted avg       0.75      0.75      0.75      5108\n",
      "\n",
      "Accuracy: 0.7492169146436961\n",
      "Precision: 0.7492605709306386\n",
      "Recall: 0.7492169146436961\n"
     ]
    }
   ],
   "source": [
    "# Initialize and train the Logistic Regression model\n",
    "logreg_model = LogisticRegression(max_iter=1000, random_state=42)  # You can adjust max_iter as needed\n",
    "logreg_model.fit(X_train_bow, y_train)\n",
    "\n",
    "# Predict labels for the test set\n",
    "y_pred = logreg_model.predict(X_test_bow)\n",
    "\n",
    "# Print classification report\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "precision = precision_score(y_test, y_pred, average='weighted')\n",
    "recall = recall_score(y_test, y_pred, average='weighted')\n",
    "print(\"Precision:\",precision)\n",
    "print(\"Recall:\",recall)"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "V100",
   "machine_shape": "hm",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "0037fce51716462cb342e5129c9bb4a8": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_ef7c5e981707401094653753d7de7e3f",
       "IPY_MODEL_9c4f6352cedd4841884f7433134a2ad5",
       "IPY_MODEL_188ff57ed6fc43a6964a12a1a1fdff97"
      ],
      "layout": "IPY_MODEL_63aa7d0045f245558d2a2a920c75709e"
     }
    },
    "0262243247234f1091d88d4c44e8731c": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "02e9deb7fd44409da4a91d9872323e30": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "0fb2e7844a744cb1ab570a2319cd3e2e": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "140c39f3851d4912a9f888c0fbdc5b24": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "188ff57ed6fc43a6964a12a1a1fdff97": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_36e8317f3e74490da2c6f6317fb4a220",
      "placeholder": "​",
      "style": "IPY_MODEL_53e877eb9d724a4ba7cd2a9421ec3b0e",
      "value": " 533/533 [00:00&lt;00:00, 19.7kB/s]"
     }
    },
    "24a7eff9d51b4feeb2c19ca75a7188c0": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "28ea564ec5e645378f419b5546db12fc": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "36e8317f3e74490da2c6f6317fb4a220": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "3b8e505b614540b6baf73a306a2de129": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_97bea118b1994847866c5aebeef48355",
      "placeholder": "​",
      "style": "IPY_MODEL_24a7eff9d51b4feeb2c19ca75a7188c0",
      "value": " 439M/439M [00:01&lt;00:00, 314MB/s]"
     }
    },
    "3e3b826832bd4e0798be411bf8adfa59": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "53e877eb9d724a4ba7cd2a9421ec3b0e": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "59eaba0965514370bb29872ecef893eb": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "5c7224b264894450813b8be84e13525a": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "5de67881529c4bccb1267c35542233fd": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "63aa7d0045f245558d2a2a920c75709e": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "6e3ff02f78184d87bd1cf0e35521a49d": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_c7294d82f41c49c3962a12b8e9f008ae",
      "max": 226122,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_0fb2e7844a744cb1ab570a2319cd3e2e",
      "value": 226122
     }
    },
    "7564180f0e6349278f2dd2b775ac0c2b": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_cf00fb58eb0c44f09601524d3ff5f35b",
       "IPY_MODEL_6e3ff02f78184d87bd1cf0e35521a49d",
       "IPY_MODEL_9ca16bb4f9064cd59f1707885d56c6ba"
      ],
      "layout": "IPY_MODEL_0262243247234f1091d88d4c44e8731c"
     }
    },
    "90dddac715ba4fa78e8b4915ff59754a": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_f27479e4180645bcba3d5e31557dd496",
       "IPY_MODEL_db7eafba39d64148a3e7cfe68fec248d",
       "IPY_MODEL_3b8e505b614540b6baf73a306a2de129"
      ],
      "layout": "IPY_MODEL_59eaba0965514370bb29872ecef893eb"
     }
    },
    "97bea118b1994847866c5aebeef48355": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "9c4f6352cedd4841884f7433134a2ad5": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_cdca0f278ff64d71b0c2eab92f74ac2e",
      "max": 533,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_f1899177121e4fd3abbf95773cdc3281",
      "value": 533
     }
    },
    "9ca16bb4f9064cd59f1707885d56c6ba": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_3e3b826832bd4e0798be411bf8adfa59",
      "placeholder": "​",
      "style": "IPY_MODEL_28ea564ec5e645378f419b5546db12fc",
      "value": " 226k/226k [00:00&lt;00:00, 7.30MB/s]"
     }
    },
    "becc405846284a1697db222e9d33db2f": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "c7294d82f41c49c3962a12b8e9f008ae": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "cdca0f278ff64d71b0c2eab92f74ac2e": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "cf00fb58eb0c44f09601524d3ff5f35b": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_d22142a22bfa48c9a63499dc1285efb9",
      "placeholder": "​",
      "style": "IPY_MODEL_140c39f3851d4912a9f888c0fbdc5b24",
      "value": "Downloading (…)solve/main/vocab.txt: 100%"
     }
    },
    "d22142a22bfa48c9a63499dc1285efb9": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "db7eafba39d64148a3e7cfe68fec248d": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_f86d8746aed04a86b3d4d3db497bf0ae",
      "max": 439101405,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_becc405846284a1697db222e9d33db2f",
      "value": 439101405
     }
    },
    "ec97a072bb464b4e8ce8ec1de13c3260": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "ef7c5e981707401094653753d7de7e3f": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_ec97a072bb464b4e8ce8ec1de13c3260",
      "placeholder": "​",
      "style": "IPY_MODEL_5c7224b264894450813b8be84e13525a",
      "value": "Downloading (…)lve/main/config.json: 100%"
     }
    },
    "f1899177121e4fd3abbf95773cdc3281": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "f27479e4180645bcba3d5e31557dd496": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_5de67881529c4bccb1267c35542233fd",
      "placeholder": "​",
      "style": "IPY_MODEL_02e9deb7fd44409da4a91d9872323e30",
      "value": "Downloading pytorch_model.bin: 100%"
     }
    },
    "f86d8746aed04a86b3d4d3db497bf0ae": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
